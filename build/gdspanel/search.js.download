var domain = {
    siteKey: 2,
    host: (window.location.host.indexOf('www') >= 0 ? window.location.host : 'localhost'),
    title: 'Ucakbileti.com',
}
var daysOfMonths = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31 };
var RSdataLayer = [];
'use strict';
angular.module("ngLocale", [], ["$provide", function ($provide) {
    var PLURAL_CATEGORY = { ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other" };
    $provide.value("$locale", {
        "DATETIME_FORMATS": {
            "AMPMS": ["ÖÖ", "ÖS"],
            "DAY": ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
            "ERANAMES": ["Milattan Önce", "Milattan Sonra"],
            "ERAS": ["MÖ", "MS"],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
            "SHORTDAY": ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"],
            "SHORTMONTH": ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara"],
            "STANDALONEMONTH": ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
            "WEEKENDRANGE": [5, 6],
            "fullDate": "d MMMM y EEEE",
            "longDate": "d MMMM y",
            "medium": "d MMM y HH:mm:ss",
            "mediumDate": "d MMM y",
            "mediumTime": "HH:mm:ss",
            "short": "d.MM.y HH:mm",
            "shortDate": "d.MM.y",
            "shortTime": "HH:mm"
        },
        "NUMBER_FORMATS": {
            "CURRENCY_SYM": "TL",
            "DECIMAL_SEP": ",",
            "GROUP_SEP": ".",
            "PATTERNS": [
              { "gSize": 3, "lgSize": 3, "maxFrac": 3, "minFrac": 0, "minInt": 1, "negPre": "-", "negSuf": "", "posPre": "", "posSuf": "" },
              { "gSize": 3, "lgSize": 3, "maxFrac": 2, "minFrac": 2, "minInt": 1, "negPre": "-", "negSuf": "\u00a0\u00a4", "posPre": "", "posSuf": "\u00a0\u00a4" }
            ]
        },
        "id": "tr-tr",
        "localeID": "tr_TR",
        "pluralCat": function (n, opt_precision) { if (n == 1) { return PLURAL_CATEGORY.ONE; } return PLURAL_CATEGORY.OTHER; }
    });
}]);
var underscore = angular.module('underscore', []);
underscore.factory('_', ['$window', function ($window) {
    return $window._;
}]);
var searchApp = angular.module('searchApp', ['underscore', 'ngResource', 'ngCookies', 'ngRoute', 'ui-rangeSlider', 'ngLocale', 'ngAnimate', 'pascalprecht.translate', 'tmh.dynamicLocale', 'ngSanitize']);

searchApp.factory('Variables', function () {
    return {
        SeatsLimit: 5,
        isMobile: $(window).width() < 1000 ? (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()) || $(window).width() <= 850) : false,
        emailPattern: /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i,
        phonePattern: /^\S*$/,
        FlightType: {
            OneWay: 'OW',
            Return: 'RT'
        },
        LanguageList : {
            'tr': {'label': "Türkçe", 'flag':'tr'},
            'en': {'label': "English", 'flag':'gb'},
            //'de': {'label': "Deutsch", 'flag': 'de' }
        },
        CountryCode: ['+90', '+1', '+1907', '+1808', '+93', '+49', '+1684', '+376', '+244', '+1264', '+1268', '+54', '+355', '+297', '+247', '+61', '+43', '+994', '+971', '+1242', '+973', '+880', '+1246', '+685', '+32', '+501', '+229', '+1441', '+375', '+591', '+387', '+267', '+55', '+673', '+359', '+226', '+95', '+257', '+975', '+235', '+350', '+420', '+213', '+253', '+86', '+45', '+246', '+1767', '+1809-1829', '+593', '+240', '+503', '+62', '+291', '+374', '+372', '+251', '+500', '+298', '+212', '+679', '+225', '+63', '+970', '+358', '+33', '+594', '+689', '+241', '+220', '+233', '+224', '+245', '+1473', '+299', '+590', '+1671', '+502', '+27', '+357', '+82', '+995', '+592', '+509', '+91', '+385', '+31', '+599', '+504', '+852', '+1284', '+44', '+964', '+98', '+353', '+34', '+972', '+46', '+41', '+39', '+354', '+1876', '+81', '+855', '+237', '+1', '+238', '+381-382', '+974', '+1345', '+7', '+254', '+996', '+686', '+57', '+  2693-2697', '+242', '+243', '+506', '+53', '+682', '+965', '+850', '+856', '+266', '+371', '+231', '+218', '+423', '+370', '+961', '+352', '+36', '+261', '+853', '+389', '+265', '+960', '+60', '+223', '+356', '+1670', '+692', '+596', '+262', '+52', '+236', '+691', '+20', '+976', '+373', '+377', '+1664', '+230', '+222', '+258', '+264', '+674', '+977', '+227', '+234', '+505', '+683', '+672', '+47', '+998', '+92', '+507', '+675', '+595', '+51', '+48', '+351', '+1787-1939', '+262', '+40', '+250', '+7', '+378', '+239', '+221', '+248', '+232', '+56', '+65', '+381', '+421', '+386', '+677', '+252', '+94', '+290', '+1869', '+1758', '+508', '+1784', '+249', '+597', '+963', '+966', '+268', '+992', '+255', '+66', '+886', '+228', '+676', '+1868', '+216', '+993', '+1649', '+688', '+1340', '+256', '+380', '+968', '+962', '+598', '+681', '+58', '+84', '+967', '+678', '+687', '+64', '+30', '+260', '+263'],
        nameOfDays: { 0: 'Pazar', 1: 'Pazartesi', 2: 'Salı', 3: 'Çarşamba', 4: 'Perşembe', 5: 'Cuma', 6: 'Cumartesi' },
        nameOfMonth: { 1: 'Ocak', 2: 'Şubat', 3: 'Mart', 4: 'Nisan', 5: 'Mayıs', 6: 'Haziran', 7: 'Temmuz', 8: 'Ağustos', 9: 'Eylül', 10: 'Ekim', 11: 'Kasım', 12: 'Aralık' },
        dataTime: { 'search': 10, 'allocate': 10, 'updatePassenger': 20 },
        "classType": {
            "Economy": "Ekonomi",
            "Comfort": "Comfort",
            "Business": "Business"
        },
        "SortingFilter": {
            1: "SORTING_FILTER.1",
            2: "SORTING_FILTER.2",
            3: "SORTING_FILTER.3",
            4: "SORTING_FILTER.4",
            5: "SORTING_FILTER.5",
            6: "SORTING_FILTER.5"
        },
        "maxAgeMessage": {
            "INF": "Uçuş tarihinde bebek 0-2 yaş arasında olmalıdır.",
            "CHD": "Uçuş tarihinde cocuk 2-12 yaş arasında olmalıdır.",
            "ADT": "Uçuş tarihinde yetişkin 12 yaşından büyük olmalıdır.",
            "OLD": "Uçuş tarihinde yaşlı 65+ yaşından büyük olmalıdır."
        }
    };
});

searchApp.factory('productService', function ($resource) {
    return {
        all: function (languageKey, callback) {
            var Product = $resource('/initial/:langId/products.json', { langId: languageKey });
            var products = Product.query(function () {
                callback(products);
            });
        }
    }
});

searchApp.config(['$translateProvider', 'tmhDynamicLocaleProvider', function ($translateProvider, tmhDynamicLocaleProvider) {
    $translateProvider.useStaticFilesLoader({
        prefix: '/assets/languages/search-',
        suffix: '.json'
    });

    $translateProvider.preferredLanguage('tr');
    $translateProvider.useCookieStorage();

    tmhDynamicLocaleProvider.localeLocationPattern('/assets/js/i18n/angular-locale_{{locale}}.js?v=1');
    tmhDynamicLocaleProvider.storeKey = $translateProvider.storagePrefix();
    $translateProvider.useSanitizeValueStrategy('escaped');
    tmhDynamicLocaleProvider.useCookieStorage();
}]);

searchApp.config(function ($routeProvider) {
    $routeProvider
        .when('/', {
            templateUrl: '/NewSearch/SearchList?q=New',
            route: 'SearchListController'
        })
        .when('/bilet-detaylari', {
            templateUrl: '/NewSearch/Tickets',
            route: 'TicketsController'
        })
        .when('/odeme', {
            templateUrl: '/NewSearch/Payment',
            route: 'PaymentController'
        })
        .when('/tesekkurler', {
            templateUrl: '/NewSearch/Thanks',
            route: 'ThanksController'
        })
        .otherwise('/' + window.location.search, {
            templateUrl: '/NewSearch/SearchList?q=New',
            route: 'SearchListController'
        });
});

searchApp.run(['$rootScope', '$route', '$filter', function ($rootScope, $route, $filter) {
    $rootScope.$on('$routeChangeSuccess', function (scope, next, current) {
        if (next.$$route.route == "SearchListController" || next.$$route.route == 'TicketsController') {
            setTimeout(function () {
                angular.element('.container.search').removeClass('opacity');
            }, 1000);
        }
    });
}]);

searchApp.filter('range_reverse', function () {
    return function (input, min, max, op) {
        max = parseInt(max);
        min = parseInt(min);
        if (op === false) {
            for (var i = 0; i < (max - min) ; i++) {
                input.push((max - i));
            }
        } else {
            for (var i = 0; i <= (max - min) ; i++) {
                input.push((max - i));
            }
        }
        return input;
    };
});

searchApp.filter('range', function () {
    return function (input, min, max, op) {
        max = parseInt(max);
        min = parseInt(min);
        if (op === false) {
            for (var i = min; i < max; i++) {
                input.push(i);
            }
        } else {
            for (var i = min; i <= max; i++) {
                input.push(i);
            }
        }
        return input;
    };
});

searchApp.filter("htmlSafe", ['$sce', function ($sce) {
    return function (htmlCode) {
        return $sce.trustAsHtml(htmlCode);
    };
}]);

searchApp.directive('creditcard', function () {
    return {
        require: 'ngModel',
        link: function (scope, elem, attr, ngModel) {
            function valid_credit_card(value) {
                if (/[^0-9-\s]+/.test(value)) return false;
                var nCheck = 0, nDigit = 0, bEven = false;
                value = value.replace(/\D/g, "");
                for (var n = value.length - 1; n >= 0; n--) {
                    var cDigit = value.charAt(n),
                    nDigit = parseInt(cDigit, 10);
                    if (bEven) {
                        if ((nDigit *= 2) > 9) nDigit -= 9;
                    }

                    nCheck += nDigit;
                    bEven = !bEven;
                }
                return (nCheck % 10) == 0;
            }

            //For DOM -> model validation
            ngModel.$parsers.unshift(function (value) {
                var valid = valid_credit_card(value)
                ngModel.$setValidity('creditcard', valid);
                return valid ? value : undefined;
            });

            //For model -> DOM validation
            ngModel.$formatters.unshift(function (value) {
                value = scope.replaceAll(value, '-', '');
                ngModel.$setValidity('creditcard', valid_credit_card(value));
                return value;
            });
        }
    }
});

searchApp.directive('citizenno', function () {
    return {
        require: 'ngModel',
        link: function (scope, elem, attr, ngModel) {
            function validateTCKN(citizenNo) {
                citizenNo = String(citizenNo);
                if (!citizenNo.match(/^[0-9]{11}$/)) return false;
                pr1 = parseInt(citizenNo.substr(0, 1));
                pr2 = parseInt(citizenNo.substr(1, 1));
                pr3 = parseInt(citizenNo.substr(2, 1));
                pr4 = parseInt(citizenNo.substr(3, 1));
                pr5 = parseInt(citizenNo.substr(4, 1));
                pr6 = parseInt(citizenNo.substr(5, 1));
                pr7 = parseInt(citizenNo.substr(6, 1));
                pr8 = parseInt(citizenNo.substr(7, 1));
                pr9 = parseInt(citizenNo.substr(8, 1));
                pr10 = parseInt(citizenNo.substr(9, 1));
                pr11 = parseInt(citizenNo.substr(10, 1));

                if ((pr1 + pr3 + pr5 + pr7 + pr9 + pr2 + pr4 + pr6 + pr8 + pr10) % 10 != pr11)
                    return false;
                if (((pr1 + pr3 + pr5 + pr7 + pr9) * 7 + (pr2 + pr4 + pr6 + pr8) * 9) % 10 != pr10)
                    return false;
                if (((pr1 + pr3 + pr5 + pr7 + pr9) * 8) % 10 != pr11)
                    return false;
                return true;
            }
            //For DOM -> model validation
            ngModel.$parsers.unshift(function (value) {
                var valid = validateTCKN(value)
                ngModel.$setValidity('citizenno', valid);
                return valid ? value : undefined;
            });

            //For model -> DOM validation
            ngModel.$formatters.unshift(function (value) {
                ngModel.$setValidity('citizenno', validateTCKN(value));
                return value;
            });
        }
    };
});

searchApp.directive('capitalizeFirst', function ($parse) {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, modelCtrl) {
            var capitalize = function (inputValue) {
                if (inputValue === undefined) { inputValue = ''; }
                var capitalized = inputValue.charAt(0).toUpperCase() + inputValue.substring(1);
                if (capitalized !== inputValue) {
                    modelCtrl.$setViewValue(capitalized);
                    modelCtrl.$render();
                }
                return capitalized;
            }
            modelCtrl.$parsers.push(capitalize);
            capitalize($parse(attrs.ngModel)(scope));
        }
    };
});
//Capitalize Filter
searchApp.filter('capitalize', function () {
    return function (input, all) {
        var reg = (all) ? /([^\W_]+[^\s-]*) */g : /([^\W_]+[^\s-]*)/;
        return (!!input) ? input.replace(reg, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); }) : '';
    }
});

//Main Controller
searchApp.controller('MainController', function ($scope, $http, Variables, $timeout, $location, $translate, $route, $routeParams, productService, tmhDynamicLocale, $filter, _) {
    $scope.isLogin = false;
    $scope.Variables = Variables;
    $scope.DefaultSearchData = {};
    $scope.totalPassenger = 0;
    $scope.TotalPassengerWithOutInf = 0;

    $http({
        method: "POST",
        url: "/Account/IsLogin",
        headers: {
            'Content-Type': 'application/json; charset=utf-8'
        },
    }).success(function (response, status) {
        $scope.isLogin = response.Status;
        if (response.Status) {
            $scope.User = response.Data;
        }
    });

    //Safe Apply
    $scope.safeApply = function (fn) {
        var phase = this.$root.$$phase;
        if (phase == '$apply' || phase == '$digest') {
            if (fn && (typeof (fn) === 'function')) {
                fn();
            }
        } else {
            this.$apply(fn);
        }
    };

    //Replace All
    $scope.replaceAll = function (value, target, replacement) {
        if (typeof value != 'undefined') {
            return value.split(target).join(replacement);
        }
    }

    //Get AirPort Detail
    $scope.getAirportDetail = function (code) {
        $http({
            method: "GET",
            url: "/Search/GetCityAndAirport?str=" + code,
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (response.length > 0) {
                angular.forEach(response, function (e, i) {
                    if (e.code == code) {
                        return e;
                    }
                });
                return false;
            } else {
                return false;
            }
        });
    }

    //Date Format
    $scope.DateFormat = function (format, date) {
        var now = typeof date == 'undefined' ? new Date() : new Date(date);
        var day = now.getDate().toString().length == 1 ? "0" + now.getDate() : now.getDate();
        var month = (now.getMonth() + 1).toString().length == 1 ? "0" + (now.getMonth() + 1) : now.getMonth() + 1;
        var year = now.getFullYear();
        if (typeof format == 'undefined') {
            return day + '-' + month + '-' + year;
        } else {
            format = format.replace('dd', day);
            format = format.replace('mm', month);
            format = format.replace('yyyy', year);
            return format;
        }

    };

    //Set SearchData
    $scope.setSearchData = function (queryParams) {
        $scope.request = {};
        queryParams.flightType = queryParams.flightType == 1 || queryParams.flightType == $scope.Variables.FlightType.OneWay ? $scope.Variables.FlightType.OneWay : $scope.Variables.FlightType.Return;
        $scope.request['request'] = queryParams;
        $scope.request['request'].toDate = queryParams.flightType == $scope.Variables.FlightType.OneWay ? $scope.request['request'].fromDate : $scope.request['request'].toDate;
        $scope.request['request'].adt = typeof queryParams.adt == 'undefined' ? 1 : parseInt(queryParams.adt);
        $scope.request['request'].chd = typeof queryParams.chd == 'undefined' ? 0 : parseInt(queryParams.chd);
        $scope.request['request'].inf = typeof queryParams.inf == 'undefined' ? 0 : parseInt(queryParams.inf);
        $scope.request['request'].mil = typeof queryParams.mil == 'undefined' ? 0 : parseInt(queryParams.mil);
        $scope.request['request'].src = typeof queryParams.src == 'undefined' ? 0 : parseInt(queryParams.src);
        $scope.request['request'].std = typeof queryParams.std == 'undefined' ? 0 : parseInt(queryParams.std);
        $scope.request['request'].flightType = typeof queryParams.flightType == 'undefined' ? $scope.Variables.FlightType.OneWay : queryParams.flightType;
        $scope.request['request'].cls = typeof queryParams.classType == 'undefined' ? "Economy" : queryParams.classType;
        $scope.request['request'].promo = typeof queryParams.promo == 'undefined' ? 0 : queryParams.promo;
        if (typeof queryParams.toDate == 'undefined' || queryParams.toDate == '') {
            queryParams.toDate = queryParams.fromDate;
        }

        angular.element('.departure').val(queryParams.departure);
        angular.element('input[name=from]').val(queryParams.from);
        angular.element('input[name=fromCity]').val(queryParams.fromCity);
        angular.element('input[name=fromCountry]').val(queryParams.fromCountry);

        angular.element('.arrived').val(queryParams.arrived);
        angular.element('input[name=to]').val(queryParams.to);
        angular.element('input[name=toCity]').val(queryParams.toCity);
        angular.element('input[name=toCountry]').val(queryParams.toCountry);

        angular.element('input[name=fromDatex]').val(queryParams.fromDatex);
        angular.element('input[name=fromDate]').val(queryParams.fromDate);
        angular.element('input[name=toDatex]').val(queryParams.toDatex);
        angular.element('input[name=toDate]').val(queryParams.toDate);

        $scope.DefaultSearchData = $scope.request['request'];
        angular.element('.passenger-container .adult .val').html($scope.DefaultSearchData.adt);
        angular.element('.passenger-container .child .val').html($scope.DefaultSearchData.chd);
        angular.element('.passenger-container .baby .val').html($scope.DefaultSearchData.inf);
        angular.element('.passenger-container .old .val').html($scope.DefaultSearchData.src);
        angular.element('.passenger-container .student .val').html($scope.DefaultSearchData.std);

        $scope.totalPassenger = $scope.DefaultSearchData.adt + $scope.DefaultSearchData.chd + $scope.DefaultSearchData.inf + $scope.DefaultSearchData.mil + $scope.DefaultSearchData.std + $scope.DefaultSearchData.src;
        $scope.TotalPassengerWithOutInf = $scope.totalPassenger - $scope.DefaultSearchData.inf;
        angular.element('#passenger').val($scope.totalPassenger + ' Yolcu');

        HepStorage.set('searchData', $scope.request['request']);
        $scope.isDomestic = $scope.request['request'].fromCountry == "TR" && $scope.request['request'].toCountry == "TR" ? true : false;
    }

    $scope.goBackUrl = 'Home';
    $scope.goBack = true;
    $scope.loaded = false; console.log('loaded : ' + false);
    $scope.IsCombine = false;
    $scope.showHeader = true;
    $scope.isDomestic = true;
    $scope.metaSearch = false;
    $scope.showStepline = false;
    $scope.showSearchBox = false;
    $scope.IsReservation = false;
    $scope.SearchLoading = false;
    $scope.goingListIsOpen = true;
    $scope.showBillingForm = false;
    $scope.returnListIsOpen = true;
    $scope.showReturnShowAll = true;
    $scope.rangeCalendarStatus = false;
    $scope.combineLimit = 25;
    $scope.safeApply();

    $scope.Data = {};
    $scope.User = null;
    $scope.Criteo = {};
    $scope.Payment = {};
    $scope.request = {};
    $scope.Filters = {};
    $scope.TicketTotal = 0;
    $scope.Passengers = [];
    $scope.TicketDetail = [];
    $scope.rangeCalendar = {};
    $scope.DefaultFilters = {};
    $scope.GoingFlightList = [];
    $scope.ReturnFlightList = [];
    $scope.allocateResponse = {};
    $scope.ExchangeRateList = [];
    $scope.CurrentCurrency = {};
    $scope.CurrentCurrency.ExchangeRate = "TRY";
    $scope.CurrentCurrency.Symbol = '₺';
    $scope.CurrentCurrency.Name = 'TL';
    $scope.CurrentCurrency.Value = 1;
    $scope.request['request'] = {};
    $scope.updatePassengerResponse = {};
    $scope.finalizeShoppingRequest = {};
    $scope.finalizeShoppingResponse = {};
    //if (HepStorage.isSet('session')) {
    //    $scope.Data.SessionId = HepStorage.get('session').SessionId;
    //    $scope.Data.SessionToken = HepStorage.get('session').SessionToken;
    //}

    //SearchList Button
    angular.element('.step-line-container .step-line .circle:first-child, .step-line-container .texts div:first-child').click(function () {
        location.hash = '#/';
    });

    //Show All
    $scope.showAllTrigger = function (list) {
        if (list == 0) {
            angular.element('.flight-list.going .btn-grey').click();
        }
        if (list == 1) {
            angular.element('.flight-list.return .btn-grey').click();
        }
        $scope.Filters = $scope.DefaultFilters;
        $scope.safeApply();
    };

    //Check Data
    $scope.checkData = function (dataName) {
        return ((HepStorage.get(dataName + 'Time') + ($scope.Variables.dataTime[dataName] * 60000) >= Date.now())) && HepStorage.isSet(dataName + 'Time')
    };

    //GoingRangeCalender
    $scope.goingRangeCalendarFunction = function () {
        $scope.goingRangeCalendarRequest = {};
        $scope.goingRangeCalendarRequest.originAirportCode = $scope.DefaultSearchData.from;
        $scope.goingRangeCalendarRequest.destinationAirportCode = $scope.DefaultSearchData.to;
        $scope.goingRangeCalendarRequest.departureDate = $scope.DefaultSearchData.fromDate;
        $http({
            method: "POST",
            url: "/Analytics/OneWayRangeCalender",
            data: JSON.stringify($scope.goingRangeCalendarRequest),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (response.Status && status) {
                $scope.goingRangeCalendar = response;
                $scope.goingRangeCalendar.Data.departure = $scope.DefaultSearchData.departure.split(',')[0];
                $scope.goingRangeCalendar.Data.arrived = $scope.DefaultSearchData.arrived.split(',')[0];
                $scope.rangeCalendar = $scope.goingRangeCalendar;
            } else {
                $scope.goingRangeCalendar.Status = false;
                $scope.rangeCalendar.Status = false;
            }
        });
    }

    //ReturnRangeCalender
    $scope.returnRangeCalendarFunction = function () {
        $scope.returnRangeCalendarRequest = {};
        $scope.returnRangeCalendarRequest.originAirportCode = $scope.DefaultSearchData.to;
        $scope.returnRangeCalendarRequest.destinationAirportCode = $scope.DefaultSearchData.from;
        $scope.returnRangeCalendarRequest.departureDate = $scope.DefaultSearchData.toDate;
        $http({
            method: "POST",
            url: "/Analytics/OneWayRangeCalender",
            data: JSON.stringify($scope.returnRangeCalendarRequest),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (response.Status && status) {
                $scope.returnRangeCalendar = response;
                $scope.returnRangeCalendar.Data.departure = $scope.DefaultSearchData.arrived.split(',')[0];
                $scope.returnRangeCalendar.Data.arrived = $scope.DefaultSearchData.departure.split(',')[0];
            } else {
                $scope.returnRangeCalendar.Status = false;
            }
        });
    }

    //Render SearchData
    $scope.renderSearchData = function (response) {
        $scope.TicketDetail = [];
        if ($.isEmptyObject($scope.DefaultSearchData)) { $scope.DefaultSearchData = HepStorage.get('searchData') }
        if (response.status) {
            if ($scope.DefaultSearchData.directFlights == true &&
            (($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay && response.data.GoingFlightList.length == 0) ||
            ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return && (response.data.GoingFlightList.length == 0 || response.data.ReturnFlightList.length == 0)))) {
                $scope.SearchLoading = false;
                $.Popup.open({
                    type: 'alert',
                    message: $filter('translate')('MESSAGE_DIRECTSEARCH'),
                    buttons: [
                        {
                            Name: 'Aktarmalı Ara',
                            Function: function () {
                                $scope.DefaultSearchData.directFlights = false;
                                angular.element('input#directFlights').attr('checked', false);
                                angular.element('.searchbox').find('.btn').click();
                                $.Popup.close();
                            }
                        },
                        {
                            Name: 'Vazgeç',
                            Function: function () {
                                window.location.href = "/";
                            }
                        }
                    ]
                });
                return false;
            }
            if (response.data.GoingFlightList.length == 0 && response.data.ReturnFlightList.length == 0) {
                response.data.GoingFlightList = [];
                response.data.ReturnFlightList = [];
                $scope.SearchLoading = false;
            }
            try {
                HepStorage.set('searchResponse', response);
                HepStorage.set('session', { 'SessionId': response.data.SessionId, 'SessionToken': response.data.SessionToken });
            }
            catch (err) {
                //console.log(err);
            }
            $scope.totalPassenger = $scope.DefaultSearchData.adt + $scope.DefaultSearchData.chd + $scope.DefaultSearchData.inf + $scope.DefaultSearchData.mil + $scope.DefaultSearchData.std + $scope.DefaultSearchData.src;
            $scope.TotalPassengerWithOutInf = $scope.totalPassenger - $scope.DefaultSearchData.inf;
            $scope.Data = response.data;
            //HotJar UserId Set
            try {
                hj.property.set('userId', response.data.SessionId);
            }
            catch (err) {
                //console.log(err);
            }

            $scope.InternationalFlightList = response.data.InternationalFlightList;
            $scope.Data.InternationalFlightList = response.data.InternationalFlightList;
            $scope.RReturnFlightList = response.data.ReturnFlightList;
            if ($scope.Variables.isMobile) {
                response.data.GoingFlightList = response.data.GoingFlightList.slice(0, 25);
                response.data.ReturnFlightList = response.data.ReturnFlightList.slice(0, 25);
                $scope.GoingFlightList = response.data.GoingFlightList;
                $scope.ReturnFlightList = response.data.ReturnFlightList;
            } else {
                $scope.GoingFlightList = response.data.GoingFlightList;
                $scope.ReturnFlightList = response.data.ReturnFlightList;
            }

            $scope.fromDate = new Date($scope.DefaultSearchData.fromDate.split('-').reverse().join('-'));
            $scope.toDate = new Date($scope.DefaultSearchData.toDate.split('-').reverse().join('-'));

            $scope.isDiffrentDay = $scope.DefaultSearchData.toDate == $scope.DefaultSearchData.fromDate && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return ? false : true;
            $scope.minDate = $scope.DefaultSearchData.fromDate == $scope.DateFormat('dd-mm-yyyy') ? true : false;
            if ((response.data.GoingFlightList.length == 0 || response.data.ReturnFlightList.length == 0) && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                $scope.filterClass = 'filter_close';
                $scope.SearchLoading = false;
                //return false;
            }
            $scope.Filter = response.data.GoingFilters;
            $scope.setFilters();

            setTimeout(function () {
                $scope.DefaultFilters = angular.copy($scope.Filters);
                $scope.safeApply();
                $scope.showAllTrigger(0);
                $scope.showAllTrigger(1);
                $scope.SearchLoading = false;
                if ((!$scope.isDomestic || $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay) && !$scope.Variables.isMobile) {
                    $scope.filters_toggle(true);
                }
                if (!$scope.isDomestic && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                    $.Notification.open({
                        message: $filter('translate')('INTERNATIONAL_FILTRE')
                        
                    });
                }
                $scope.loaded = true; console.log('loaded : true');
                $scope.getExchangeRateList();
                $scope.safeApply();
            }, 500);
            //setTimeout(function () {
            //    $scope.goingRangeCalendarFunction();
            //    if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
            //        $scope.returnRangeCalendarFunction();
            //    }
            //}, 3000);
        } else {
            $scope.SearchLoading = false;
            $.Popup.open({
                type: 'alert',
                message: response.message,
                buttons: [{
                     Name: 'Tamam',
                     Function: function () {
                         $.Popup.close();
                         window.location.href = "/";
                     }
                 }]
            });
        }
    }

    //Search Request
    $scope.searchFunction = function (request) {
        request['request'].UserAgentInfo = navigator.userAgent;
        request['request'].languageKey = $scope.languageKey;
        request['request'].IsCombine = 2;
        $scope.DefaultSearchData = request['request'];
        $scope.request = request;
        $scope.loaded = false;
        $scope.SearchLoading = true;
        $('body').append('<script src="https://ads.creative-serving.com/pixel?id=3142796&type=js&customer_extra=UB_' + $scope.DefaultSearchData.fromCity + '_' + $scope.DefaultSearchData.fromCountry + '_' + $scope.DefaultSearchData.toCity + '_' + $scope.DefaultSearchData.toCountry + ';Travel"></script>');
        $scope.flightTypeClass = $scope.request['request'].flightType == $scope.Variables.FlightType.Return ? "multi" : "";
        $scope.isDomestic = $scope.request['request'].fromCountry == "TR" && $scope.request['request'].toCountry == "TR" ? true : false;
        $scope.IsCombine = (($scope.request['request'].fromCountry != "TR" || $scope.request['request'].toCountry != "TR") && request['request'].flightType == $scope.Variables.FlightType.Return) ? true : false;

        if($scope.isDomestic){
            $('.container.search').removeClass('international');
        }else{
            $('.container.search').addClass('international');
        }
        if (!($scope.checkData('search') && HepStorage.isSet('searchResponse')) || HepStorage.get('newSearch')) {
            HepStorage.remove(['allocateResponse', 'allocateTime', 'passengers', 'searchResponse', 'searchTime', 'ticketDetail', 'updatePassenger', 'updatePassengerTime']);
            HepStorage.set('searchData', request['request']);
            $http({
                method: "POST",
                url: "/NewSearch/GetFlights",
                data: JSON.stringify($scope.request),
                async: true,
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
            }).success(function (response, status) {
                if (status) $scope.renderSearchData(response);
                HepStorage.set('searchTime', Date.now());
            });
        } else {
            $timeout(function () {
                $scope.renderSearchData(HepStorage.get('searchResponse'));
            }, 500);
        }
    }

    //FinalizeShopping Function
    $scope.finalizeShoppingFunction = function (request) {
        request.UserAgentInfo = navigator.userAgent;
        request.languageKey = $scope.languageKey;
        $http({
            method: "POST",
            url: "/NewPayment/FinalizeShopping",
            data: JSON.stringify(request),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (!response.Status) {
                $.Popup.open({ type: 'alert', title: 'Uyarı', message: response.Message });
            } else {
                $scope.finalizeShoppingResponse = response;
                $.Popup.close();
                location.hash = '#/tesekkurler';
            }
        });
    }

    //StepAnimation
    $scope.stepBar = function (step) {
        for (var i = 1; i <= step; i++) {
            $('.step-line .line').animate({
                width: '33%'
            }, 1500, function () {
                $('.step-line .circle:nth-child(2)').addClass('active');
                $('.step-line .circle:nth-child(3), .step-line .circle:nth-child(4)').addClass('active');
            });
        }
    };

    //Set Filters
    $scope.setFilters = function () {
        $scope.combineLimit = 30;
        $scope.Filters = $scope.Data.GoingFilters;
        $scope.Filters.SelectedStopCount = [];
        if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return && $scope.Data.ReturnFlightList.length > 0) {
            $scope.Filters.TransferCountList = _.uniq($scope.Filters.TransferCountList.concat($scope.Data.ReturnFilters.TransferCountList));
        }

        angular.forEach($scope.Filters.TransferCountList, function (value, key) {
            $scope.Filters.SelectedStopCount[value] = true;
        });

        $scope.Filters.ArrivalAirportFilters = _.uniq(_.union($scope.Data.GoingFilters.ArrivalAirportFilters, $scope.Data.GoingFilters.DepartureAirportFilters, $scope.Data.ReturnFilters.ArrivalAirportFilters, $scope.Data.ReturnFilters.DepartureAirportFilters), false, function (item, key, a) { return item.Code; });
        $scope.Filters.SelectedAirPorts = {};
        angular.forEach($scope.Filters.ArrivalAirportFilters, function (value, key) {
            $scope.Filters.SelectedAirPorts[value.Code] = true;
        });

        $scope.Filters.AirlineFilters = _.uniq(_.union($scope.Data.GoingFilters.AirlineFilters, $scope.Data.ReturnFilters.AirlineFilters), false, function (item, key, a) { return item.Code; });
        $scope.Filters.SelectedAirLines = {};
        angular.forEach($scope.Filters.AirlineFilters, function (value, key) {
            $scope.Filters.SelectedAirLines[value.Code] = true;
        });

        $scope.ShowList = 0;
        $scope.GoingFilter = true;
        $scope.ReturnFilter = true;
        $scope.Filters.directFlights = false;
        $scope.Filters.isRefundable = false;

        $scope.Filters.GoingPrice = {};
        $scope.Filters.ReturnPrice = {};
        $scope.Filters.ReturnDepartureTimeRange = {};
        $scope.Filters.ReturnArrivalTimeRange = {};

        $scope.Filters.ShowGoing = false;
        $scope.Filters.ShowReturn = false;
        if ($scope.IsCombine) {
            var min = _.min($scope.Data.InternationalFlightList, function (item) { return item[0].TotalFee + item[0].TotalFee; });
            var max = _.max($scope.Data.InternationalFlightList, function (item) { return item[0].TotalFee + item[0].TotalFee; });
            $scope.Data.GoingFilters.PriceRange.MinAmount = min[0].TotalFee + min[1].TotalFee;
            $scope.Data.GoingFilters.PriceRange.MaxAmount = max[0].TotalFee + max[1].TotalFee;
        }
        if ($scope.Data.GoingFlightList.length > 0 || $scope.IsCombine) {
            $scope.Filters.ShowGoing = true;
            $scope.Filters.GoingPrice.Limit = {};
            $scope.Filters.GoingPrice.Limit.MinAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.GoingPrice.Limit.MaxAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.GoingPrice.MinAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.GoingPrice.MaxAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);
            
            $scope.Filters.GoingDepartureTimeRange = {};
            $scope.Filters.GoingDepartureTimeRange.MinTime = parseInt($scope.Data.GoingFilters.DepartureTimeRange.MinTime.split(":")[0]);
            $scope.Filters.GoingDepartureTimeRange.MaxTime = parseInt($scope.Data.GoingFilters.DepartureTimeRange.MaxTime.split(":")[1]) > 0 && parseInt($scope.Data.GoingFilters.DepartureTimeRange.MaxTime.split(":")[0]) < 24 ? parseInt($scope.Data.GoingFilters.DepartureTimeRange.MaxTime.split(":")[0]) + 1 : parseInt($scope.Data.GoingFilters.DepartureTimeRange.MaxTime.split(":")[0]);
            $scope.Filters.GoingDepartureTimeRange.MinTimeVal = $scope.Filters.GoingDepartureTimeRange.MinTime;
            $scope.Filters.GoingDepartureTimeRange.MaxTimeVal = $scope.Filters.GoingDepartureTimeRange.MaxTime;

            $scope.Filters.GoingArrivalTimeRange = {};
            $scope.Filters.GoingArrivalTimeRange.MinTime = parseInt($scope.Data.GoingFilters.ArrivalTimeRange.MinTime.split(":")[0]);
            $scope.Filters.GoingArrivalTimeRange.MaxTime = parseInt($scope.Data.GoingFilters.ArrivalTimeRange.MaxTime.split(":")[1]) > 0 && parseInt($scope.Data.GoingFilters.ArrivalTimeRange.MaxTime.split(":")[0]) < 24 ? parseInt($scope.Data.GoingFilters.ArrivalTimeRange.MaxTime.split(":")[0]) + 1 : parseInt($scope.Data.GoingFilters.ArrivalTimeRange.MaxTime.split(":")[0]);
            $scope.Filters.GoingArrivalTimeRange.MinTimeVal = $scope.Filters.GoingArrivalTimeRange.MinTime;
            $scope.Filters.GoingArrivalTimeRange.MaxTimeVal = $scope.Filters.GoingArrivalTimeRange.MaxTime;
            if ($scope.Variables.isMobile && !$scope.IsCombine) {
                $scope.Filters.GoingPrice.Limit.MaxAmount = _.max($scope.GoingFlightList, function (o) { return o.TotalFee; }).TotalFee;
                $scope.Filters.GoingPrice.MaxAmount = _.max($scope.GoingFlightList, function (o) { return o.TotalFee; }).TotalFee;
            }
        }

        if (($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return && $scope.Data.ReturnFlightList.length > 0) || $scope.IsCombine) {
            $scope.Filters.ShowReturn = true;
            $scope.Filters.ReturnPrice.Limit = {};
            $scope.Filters.ReturnPrice.Limit.MinAmount = angular.copy($scope.Data.ReturnFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.ReturnPrice.Limit.MaxAmount = angular.copy($scope.Data.ReturnFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.ReturnPrice.MinAmount = angular.copy($scope.Data.ReturnFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.ReturnPrice.MaxAmount = angular.copy($scope.Data.ReturnFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);

            $scope.Filters.ReturnDepartureTimeRange.MinTime = parseInt($scope.Data.ReturnFilters.DepartureTimeRange.MinTime.split(":")[0]);
            $scope.Filters.ReturnDepartureTimeRange.MaxTime = parseInt($scope.Data.ReturnFilters.DepartureTimeRange.MaxTime.split(":")[1]) > 0 && parseInt($scope.Data.ReturnFilters.DepartureTimeRange.MaxTime.split(":")[0]) < 24 ? parseInt($scope.Data.ReturnFilters.DepartureTimeRange.MaxTime.split(":")[0]) + 1 : parseInt($scope.Data.ReturnFilters.DepartureTimeRange.MaxTime.split(":")[0]);
            $scope.Filters.ReturnDepartureTimeRange.MinTimeVal = $scope.Filters.ReturnDepartureTimeRange.MinTime;
            $scope.Filters.ReturnDepartureTimeRange.MaxTimeVal = $scope.Filters.ReturnDepartureTimeRange.MaxTime;

            $scope.Filters.ReturnArrivalTimeRange.MinTime = parseInt($scope.Data.ReturnFilters.ArrivalTimeRange.MinTime.split(":")[0]);
            $scope.Filters.ReturnArrivalTimeRange.MaxTime = parseInt($scope.Data.ReturnFilters.ArrivalTimeRange.MaxTime.split(":")[1]) > 0 && parseInt($scope.Data.ReturnFilters.ArrivalTimeRange.MaxTime.split(":")[0]) < 24 ? parseInt($scope.Data.ReturnFilters.ArrivalTimeRange.MaxTime.split(":")[0]) + 1 : parseInt($scope.Data.ReturnFilters.ArrivalTimeRange.MaxTime.split(":")[0]);
            $scope.Filters.ReturnArrivalTimeRange.MinTimeVal = $scope.Filters.ReturnArrivalTimeRange.MinTime;
            $scope.Filters.ReturnArrivalTimeRange.MaxTimeVal = $scope.Filters.ReturnArrivalTimeRange.MaxTime;

            if ($scope.Variables.isMobile) {
                $scope.Filters.ReturnPrice.Limit.MaxAmount = _.max($scope.ReturnFlightList, function (o) { return o.TotalFee; }).TotalFee;
                $scope.Filters.ReturnPrice.MaxAmount = _.max($scope.ReturnFlightList, function (o) { return o.TotalFee; }).TotalFee;
            }
        }

        $scope.Filters.Sorting = {};
        $scope.Filters.Sorting.Going = "1";
        $scope.Filters.Sorting.Return = "1";
        if ($scope.request['request'].flightType == $scope.Variables.FlightType.Return || $scope.Variables.isMobile) {
            if (!$scope.isDomestic) {
                $scope.filters_toggle(false);
            } else {
                $scope.filters_toggle(false);
            }
        } else {
            $scope.filters_toggle(true);
        }
        $scope.safeApply();
    }

    //ListTypeToggle
    $scope.ListToggle = function (x) {
        $scope.IsCombine = x;
        if ($scope.IsCombine) {
            var min = _.min($scope.Data.InternationalFlightList, function (item) { return item[0].TotalFee + item[0].TotalFee; });
            var max = _.max($scope.Data.InternationalFlightList, function (item) { return item[0].TotalFee + item[0].TotalFee; });
            $scope.Data.GoingFilters.PriceRange.MinAmount = min[0].TotalFee + min[1].TotalFee;
            $scope.Data.GoingFilters.PriceRange.MaxAmount = max[0].TotalFee + max[1].TotalFee;
        } else {
            var min = _.min($scope.Data.GoingFlightList, function (item) { return item.TotalFee; });
            var max = _.max($scope.Data.GoingFlightList, function (item) { return item.TotalFee; });
            $scope.Data.GoingFilters.PriceRange.MinAmount = min.TotalFee;
            $scope.Data.GoingFilters.PriceRange.MaxAmount = max.TotalFee;
        }
        $scope.Filters.GoingPrice.Limit.MinAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
        $scope.Filters.GoingPrice.Limit.MaxAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);
        $scope.Filters.GoingPrice.MinAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
        $scope.Filters.GoingPrice.MaxAmount = angular.copy($scope.Data.GoingFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);

        $scope.safeApply();
    }

    //Allocate
    $scope.allocateFunction = function (allocateRequest) {
        //$scope.loaded = false; console.log('loaded : ' + false);
        allocateRequest.UserAgentInfo = navigator.userAgent;
        allocateRequest.languageKey = $scope.languageKey;
        var gclidObj = HepStorage.get('gclid');
        //allocateRequest.ServiceFee.GclId = gclidObj == null ? null : gclidObj.id;
        allocateRequest.ServiceFee.GclId = null;
        $http({
            method: "POST",
            url: "/TicketDetail/Allocate",
            data: JSON.stringify(allocateRequest),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (!response.status) {
                $.Popup.open({ type: 'alert', title: 'Uyarı', message: response.message });
            } else {
                $scope.insuranceShow = false;
                $scope.allocateResponse = response.data;
                $scope.allocateResponse.Promosyon = {};
                if (response.data.Insurance != null) {
                    $scope.insuranceShow = true;
                    $scope.allocateResponse.Insurance.Status = false;
                }
                if (response.data.DiscountAmount == 0) {
                    $scope.allocateResponse.Promosyon.Status = false;
                } else {
                    $scope.allocateResponse.Promosyon.Status = true;
                }
                if (typeof allocateRequest.RedeemCode != 'undefined' && (allocateRequest.RedeemCode == '' || allocateRequest.RedeemCode == null) && $scope.allocateResponse.DiscountAmount == 0) {
                    $.Popup.open({ type: 'alert', title: 'Uyarı', message: 'İndirim Kodu Hatalı, Lütfen İndirim Kodunuzu Kontrol Ediniz' });
                }
                $scope.allocateResponse.TicketTotalWithServiceFee = 0;
                angular.forEach($scope.allocateResponse.PriceDetails, function (price, i) {
                    $scope.allocateResponse.TicketTotalWithServiceFee += (price.BaseFee + price.TaxFee + price.ServiceFee);
                });
                try {
                    HepStorage.set('allocateResponse', response.data);
                    HepStorage.set('allocateTime', new Date().getTime());
                }
                catch (err) {
                    //console.log(err);
                }
                angular.element('.float-nav').hide();
                $location.path('/bilet-detaylari');
                $.Popup.close();
                setTimeout(function () {
                    if (response.data.RedeemMessage != null && response.data.RedeemMessage != "") {
                        $.Popup.open({ 
                            type: 'alert', 
                            title: 'Uyarı', 
                            message: response.data.RedeemMessage,
                            buttons: [{
                                Name: 'Tamam',
                                Function: function () {
                                    $.Popup.close();
                                }
                            }]
                        }); 
                    }
                    $scope.loaded = true; console.log('loaded : ' + true);
                    $scope.safeApply();
                }, 150);
            }
        });
    }

    //UpdatePassenger
    $scope.updatePassengerFunction = function (updatePassengerRequest) {
        $scope.loaded = false; console.log('loaded : ' + false);
        $scope.stepLineToggle(true);
        updatePassengerRequest.UserAgentInfo = navigator.userAgent;
        updatePassengerRequest.languageKey = $scope.languageKey;
        $http({
            method: "POST",
            url: "/TicketDetail/UpdatePassenger",
            data: JSON.stringify(updatePassengerRequest),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if ($scope.isLogin && (!$scope.User.IsEmail || !$scope.User.IsSms) && updatePassengerRequest.Form.NewPassengers[0].isEmail) {
                $scope.User.IsEmail = true;
                $scope.User.IsSms = true;
                $scope.User.Phone = updatePassengerRequest.Form.NewPassengers[0].Phone;
                $http({
                    method: "POST",
                    url: "/User/Update",
                    data: $scope.User,
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8'
                    },
                }).success(function (response, status) {
                    console.log(response);
                });
            }
            $scope.loaded = true; console.log('loaded : ' + true);
            if (!response.status) {
                var buttons = [];
                if (response.errorType > 0) {
                    buttons.push({ Name: 'Ana Sayfa', Function: function () { location.href = '/'; } });
                    buttons.push({
                        Name: 'Yeniden Seç', Function: function () {
                            location.hash = '#/';
                            $.Popup.close();
                            $scope.searchFunction($scope.request);
                        }
                    });
                } else {
                    buttons.push({ Name: 'Tamam', Function: function () { $.Popup.close(); } });
                }
                $.Popup.open({
                    type: 'alert',
                    title: 'Uyarı',
                    message: response.message,
                    buttons: buttons
                });
            } else {
                $scope.updatePassengerResponse = response.data;
                try {
                    HepStorage.set('updatePassenger', response.data);
                    HepStorage.set('updatePassengerTime', new Date().getTime());
                    HepStorage.remove('searchResponse');
                    HepStorage.remove('searchTime');
                    HepStorage.remove('searchDataTime');
                }
                catch (err) {
                    //console.log(err);
                }
                if (updatePassengerRequest.IsReservation) {
                    if ($scope.updatePassengerResponse.IsReservation) {
                        $scope.finalizeShoppingResponse.Data = $scope.updatePassengerResponse
                        $scope.finalizeShoppingResponse.Data.PaymentStatus = 1;
                        $scope.finalizeShoppingResponse.Data.InsuranceStatus = false;
                        $location.path('/tesekkurler');
                        $.Popup.close();
                        $scope.safeApply();
                    } else {
                        $.Popup.open({ type: 'alert', message: 'Rezervasyon işleminde bir sorun oluştu lütfen direk satın alabilir veya daha sonra tekrar deneyebilirsiniz.' });
                    }
                } else {
                    $location.path('/odeme');
                }
            }
        });
    };

    //Payment
    $scope.paymentFunction = function (paymentRequest) {
        paymentRequest.UserAgentInfo = navigator.userAgent;
        paymentRequest.languageKey = $scope.languageKey;
        $http({
            method: "POST",
            url: "/NewPayment/Payment",
            data: JSON.stringify(paymentRequest),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (!response.status) {
                var buttons = [];
                if (response.errorType > 0) {
                    buttons.push({ Name: 'Ana Sayfa', Function: function () { location.href = '/'; } });
                    buttons.push({ Name: 'Yeniden Seç', Function: function () { location.hash = '#/'; $scope.searchFunction($scope.request); } });
                } else {
                    buttons.push({ Name: 'Tamam', Function: function () { $.Popup.close(); } });
                }
                $.Popup.open({
                    type: 'alert',
                    title: 'Uyarı',
                    message: response.message,
                    buttons: buttons
                });
            } else {
                $scope.paymentResponse = response.data;
                $.Popup.open({ url: $scope.paymentResponse, type: 'iframe', title: '3D ile Ödeme', classes: 'threeD', close: true });
                $('body').addClass('lock');
            }
        });
    }

    //GetTicketDetail
    $scope.getTicketDetails = function (getTicketDetailsRequest) {
        HepStorage.set('session', { "SessionId": getTicketDetailsRequest.sessionId, "SessionToken": getTicketDetailsRequest.sessionToken });
        getTicketDetailsRequest.sessionId = getTicketDetailsRequest.sessionId;
        getTicketDetailsRequest.sessionToken = getTicketDetailsRequest.sessionToken;
        getTicketDetailsRequest.goingPrice = parseFloat(getTicketDetailsRequest.goingPrice.replace(',', '.'));
        getTicketDetailsRequest.flightType = "OW";
        getTicketDetailsRequest.languageKey = $scope.languageKey;

        if (getTicketDetailsRequest.productId.length > 1 || (getTicketDetailsRequest.productId.length == 1 && getTicketDetailsRequest.SubOption.length > 1)) {
            getTicketDetailsRequest.returnPrice = parseFloat(getTicketDetailsRequest.returnPrice.replace(',', '.'));
            getTicketDetailsRequest.flightType = "RT";
        }
        getTicketDetailsRequest.UserAgentInfo = navigator.userAgent;
        $http({
            method: "POST",
            url: "/MetaSearch/TicketDetails",
            data: JSON.stringify(getTicketDetailsRequest),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (!response.status) {
                $.Popup.open({
                    type: 'alert',
                    title: 'Uyarı',
                    message: response.message,
                    buttons: [{
                        Name: 'Tamam',
                        Function: function () {
                            $.Popup.close();
                            window.location = '/';
                        }
                    }]
                });
            } else {
                $scope.metaSearchDataRender(response.data);
            }
        });
    }

    //MetaSearch Data
    $scope.metaSearchDataRender = function (metaData) {
        $scope.TicketDetail = metaData.Airbookings;
        $scope.allocateResponse.PriceDetails = metaData.PriceDetails;
        $scope.allocateResponse.Insurance = metaData.Insurance;
        $scope.allocateResponse.DiscountId = metaData.DiscountId;
        $scope.allocateResponse.DiscountAmount = metaData.DiscountAmount;
        $scope.allocateResponse.ExtraServiceFee = metaData.ExtraServiceFee;
        $scope.allocateResponse.ServiceFee = metaData.ServiceFee;
        $scope.Data.SessionId = metaData.SessionId;
        $scope.Data.SessionToken = metaData.SessionToken;
        HepStorage.set('session', { "SessionId": metaData.SessionId, "SessionToken": metaData.SessionToken });

        $scope.insuranceShow = false;
        $scope.allocateResponse.Promosyon = {};
        if ($scope.allocateResponse.Insurance != null) {
            $scope.insuranceShow = true;
            $scope.allocateResponse.Insurance.Status = false;
        }
        if (metaData.DiscountAmount == 0) {
            $scope.allocateResponse.Promosyon.Status = false;
        } else {
            $scope.allocateResponse.Promosyon.Status = true;
        }

        $scope.allocateResponse.TicketTotalWithServiceFee = 0;
        angular.forEach($scope.allocateResponse.PriceDetails, function (price, i) {
            $scope.allocateResponse.TicketTotalWithServiceFee += (price.BaseFee + price.TaxFee + price.ServiceFee);
        });

        angular.forEach($scope.TicketDetail, function (ticket, i) {
            $scope.TicketDetail[i].StopCount = ($scope.TicketDetail[i].SegmentList.length - 1);
            angular.forEach($scope.TicketDetail[i].SegmentList, function (sValue, sKey) {
                $scope.TicketDetail[i].SegmentList[sKey].ArrivalDate = $scope.TicketDetail[i].SegmentList[sKey].ArrivalDate.split("T")[0];
                $scope.TicketDetail[i].SegmentList[sKey].DepartureDate = $scope.TicketDetail[i].SegmentList[sKey].DepartureDate.split("T")[0];
                $scope.TicketDetail[i].SegmentList[sKey].ArrivalTime = $scope.TicketDetail[i].SegmentList[sKey].ArrivalTime.substr(0, 5);
                $scope.TicketDetail[i].SegmentList[sKey].DepartureTime = $scope.TicketDetail[i].SegmentList[sKey].DepartureTime.substr(0, 5);
                if (sKey > 0) {
                    var prevKey = sKey - 1;
                    var diffirence = new Date($scope.TicketDetail[i].SegmentList[sKey].DepartureDate.substr(0, 10) + 'T' + $scope.TicketDetail[i].SegmentList[sKey].DepartureTime + ':00') - new Date($scope.TicketDetail[i].SegmentList[prevKey].ArrivalDate.substr(0, 10) + 'T' + $scope.TicketDetail[i].SegmentList[prevKey].ArrivalTime + ':00');
                    var milliseconds = parseInt((diffirence % 1000) / 100)
                    , minutes = parseInt((diffirence / (1000 * 60)) % 60)
                    , hours = parseInt((diffirence / (1000 * 60 * 60)) % 24);
                    $scope.TicketDetail[i].SegmentList[sKey].StopTime = { hour: hours, minute: minutes };
                }
            });
        });
        var searchData = metaData.SearchRequest;
        $scope.DefaultSearchData.departure = metaData.FromLabel;
        $scope.DefaultSearchData.from = searchData.From;
        $scope.DefaultSearchData.fromCity = metaData.FromCityCode;
        $scope.DefaultSearchData.fromCountry = searchData.FromCountry;

        $scope.DefaultSearchData.arrived = metaData.ToLabel;
        $scope.DefaultSearchData.to = searchData.To;
        $scope.DefaultSearchData.toCity = metaData.ToCityCode;
        $scope.DefaultSearchData.toCountry = searchData.ToCountry;
        $scope.DefaultSearchData.cls = _.invert($scope.Variables.classType)[searchData.cls];

        $scope.DefaultSearchData.fromDate = searchData.FromDate;
        $scope.DefaultSearchData.fromDatex = searchData.FromDateLabel;
        $scope.DefaultSearchData.toDate = searchData.FromDate;
        $scope.DefaultSearchData.toDatex = searchData.FromDateLabel;

        if (searchData.FlightType == $scope.Variables.FlightType.Return) {
            $scope.DefaultSearchData.toDate = searchData.ToDate;
            $scope.DefaultSearchData.toDatex = searchData.ToDateLabel;
        }

        $scope.DefaultSearchData.flightType = searchData.FlightType;

        $scope.DefaultSearchData.adt = searchData.Adt;
        $scope.DefaultSearchData.chd = searchData.Chd;
        $scope.DefaultSearchData.inf = searchData.Inf;
        $scope.DefaultSearchData.src = searchData.Src;
        $scope.DefaultSearchData.std = searchData.Std;
        $scope.DefaultSearchData.mil = searchData.Mil;

        $scope.setSearchData($scope.DefaultSearchData);
        HepStorage.set('searchData', $scope.DefaultSearchData);
        HepStorage.set('ticketDetail', $scope.TicketDetail);
        HepStorage.set('allocateResponse', $scope.allocateResponse);
        angular.element('.float-nav').hide();
        if (metaData.IsReservation) {
            $scope.updatePassengerResponse.BankList = metaData.BankList;
            $scope.Passengers = metaData.NewPassengers;
            $scope.updatePassengerResponse.Reservation = { PnrList: metaData.PnrList, ReservationTimeList: metaData.ReservationTimeList };
            $scope.updatePassengerResponse.IsReservation = true;
            HepStorage.set('passengers', $scope.Passengers);
            HepStorage.set('updatePassenger', $scope.updatePassengerResponse);
            HepStorage.set('updatePassengerTime', new Date().getTime());
            $location.path('/odeme');
        } else {
            $location.path('/bilet-detaylari');
        }
        setTimeout(function () {
            $scope.showStepline = true;
            $scope.loaded = true; console.log('loaded : ' + true);
            $scope.safeApply();
            $.Popup.close();
        }, 150);
    };

    //Reservation Detail
    $scope.getReservationDetail = function (pnr) {
        $.Popup.open({ type: 'loading', message: $filter('translate')('PAYMENT.COMPLETE_RESERVATION') });
        $http({
            method: "POST",
            url: "/TicketDetail/Reservation",
            data: JSON.stringify({ pnr: pnr }),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (!response.status) {
                $.Popup.open({
                    type: 'alert',
                    title: 'Uyarı',
                    message: response.message,
                    buttons: [{
                        Name: 'Tamam',
                        Function: function () {
                            $.Popup.close();
                            window.location = '/';
                        }
                    }]
                });
            } else {
                response.data.IsReservation = true;
                $scope.IsReservation = true;
                $scope.metaSearchDataRender(response.data);
            }
        });
    }

    //Flight Detail
    $scope.flight_detail = function (listKey, segment) {
        $scope.ShowTicketDetail = [];
        $scope.ShowTicketDetail[0] = segment;
        $scope.showDetailList = listKey;
        angular.forEach($scope.ShowTicketDetail, function (value, key) {
            $scope.TicketTotal += value.TotalFee;
            $scope.BaseFeeTotal += value.BaseFee;
            $scope.TaxFeeTotal += value.TaxFee;
            var firstTime = new Date(value.SegmentList[0].DepartureDate.substr(0, 10) + 'T' + value.SegmentList[0].DepartureTime.substr(0, 5) + ':00');

            $scope.ShowTicketDetail[key].onAirPortTime = new Date(firstTime - 7200000).toLocaleDateString() + 'T' + $scope.Variables.nameOfDays[new Date(firstTime - 7200000).getDay()] + ' ' + new Date(firstTime - 7200000).toLocaleTimeString().substr(0, 5);

            //Baggage
            $scope.ShowTicketDetail[key].BaggageNote = $scope.ShowTicketDetail[key].BaggageWeight.substr(0, 1) == '0' ? true : false;
            $scope.ShowTicketDetail[key].BaggageWeight = $scope.ShowTicketDetail[key].BaggageWeight.substr(0, 1) == '0' ? 'El Bagajı' : $scope.ShowTicketDetail[key].BaggageWeight;
            //StopTime Set
            angular.forEach($scope.ShowTicketDetail[key].SegmentList, function (sValue, sKey) {
                $scope.ShowTicketDetail[key].StopTimeNote = false;
                if (sKey > 0) {
                    var prevKey = sKey - 1;
                    var diffirence = new Date($scope.ShowTicketDetail[key].SegmentList[sKey].DepartureDate.substr(0, 10) + 'T' + $scope.ShowTicketDetail[key].SegmentList[sKey].DepartureTime + ':00') - new Date($scope.ShowTicketDetail[key].SegmentList[prevKey].ArrivalDate.substr(0, 10) + 'T' + $scope.ShowTicketDetail[key].SegmentList[prevKey].ArrivalTime + ':00');

                    var milliseconds = parseInt((diffirence % 1000) / 100)
                    , minutes = parseInt((diffirence / (1000 * 60)) % 60)
                    , hours = parseInt((diffirence / (1000 * 60 * 60)) % 24);

                    $scope.ShowTicketDetail[key].SegmentList[sKey].StopTime = { hour: hours, minute: minutes };
                    $scope.ShowTicketDetail[key].StopTimeNote = hours >= 12 ? true : false;
                }
            });
            //Total Flight Time
            var lastTime = new Date(value.SegmentList[value.StopCount].ArrivalDate.substr(0, 10) + 'T' + value.SegmentList[value.StopCount].ArrivalTime.substr(0, 5) + ':00');
            $scope.ShowTicketDetail[key].TotalTimeHour = Math.floor((lastTime - firstTime) / 3600000);
            $scope.ShowTicketDetail[key].TotalTimeMinute = ((lastTime - firstTime) - ($scope.ShowTicketDetail[key].TotalTimeHour * 3600000)) / 60000;
            $scope.ShowTicketDetail[key].TotalTime = $scope.ShowTicketDetail[key].TotalTimeHour + ' Saat ';
            $scope.ShowTicketDetail[key].TotalTime += $scope.ShowTicketDetail[key].TotalTimeMinute != 0 ? $scope.ShowTicketDetail[key].TotalTimeMinute + ' Dakika' : '';
        });

        //Destination Control
        angular.forEach($scope.ShowTicketDetail, function (e, i) {
            angular.forEach(e.SegmentList, function (s, ii) {
                if (typeof e.SegmentList[ii + 1] != 'undefined') {
                    if (s.ArrivalAirport != e.SegmentList[ii + 1].DepartureAirport) {
                        $scope.ShowTicketDetail[i].transferNotes = true;
                    }
                }
            });
        });

        angular.element('.ticketDetail').show();
        $scope.safeApply();
    };

    //Show Detail
    $scope.show_detail = function (e) {
        var that = $(e.toElement.parentElement).attr('class') == 'show_detail' ? e.toElement.parentElement : e.target;
        $(that).parent('.detail_row').toggleClass('active');
        $(that).next('.detail').slideToggle();
    }

    //Get PassengerList
    $scope.getPassengerList = function () {
        $http({
            method: "POST",
            url: "/User/GetPassengerList",
            data: "",
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (response.Data == null || response.Data == "null") {
                $scope.PassengerRecords = [];
            } else {
                angular.forEach(response.Data, function (value, key) {
                    response.Data[key].birthDay = parseInt(value.Birthdate.split('-')[2]).toString();
                    response.Data[key].birthMonth = parseInt(value.Birthdate.split('-')[1]).toString();
                    response.Data[key].birthYear = parseInt(value.Birthdate.split('-')[0]).toString();
                    response.Data[key].isTC = false;
                    if (response.Data[key].CitizenNo == "" || response.Data[key].CitizenNo == "null" || response.Data[key].CitizenNo == null) {
                        response.Data[key].CitizenNo = "11111111110";
                        response.Data[key].isTC = true;
                    }
                });
                $scope.PassengerRecords = response.Data;
            }
            $scope.safeApply();
        });
    }

    //StepLine Toggle
    $scope.stepLineToggle = function (x) {
        $scope.showStepline = x;
    }

    //Header Toggle
    $scope.showHeaderToggle = function (x) {
        console.log('Header : ' + x);
        $scope.showHeader = x;
        $scope.safeApply();
    }

    //SearchBox Toggle
    $scope.showSearchBoxToggle = function (x) {
        $scope.showSearchBox = x;
    }

    //Filters Toggle
    $scope.filters_toggle = function (s) {
        if (s == true || s == false) {
            $scope.filterClass = s ? 'filter_open' : 'filter_close';
        } else {
            $scope.filterClass = $scope.filterClass == 'filter_close' ? $scope.filterClass = 'filter_open' : $scope.filterClass = 'filter_close';
            angular.element('.menu-btn').removeClass('active');
            angular.element('.main-nav').removeClass('active');
        }
    }

    //RangeCalender Toggle
    $scope.rangeCalendarToggle = function () {
        $scope.rangeCalendarStatus = $scope.rangeCalendarStatus ? false : true;
    }

    //GoBack Button Toggle
    $scope.goBackToggle = function (x, y) {
        $scope.goBack = x;
        $scope.goBackUrl = y;
    };

    //GoBack Button
    $scope.goBackFunction = function () {
        if ($scope.goBackUrl == 'Home') {
            location.href = '/';
        } else if ($scope.goBackUrl == '/' && angular.element('.main_container.passengers').is(":visible")) {
            $scope.showPassenger();
        } else {
            $location.path($scope.goBackUrl);
        }
    };

    //Show Passengers
    $scope.showPassenger = function () {
        angular.element('.main_container.insurance, .main_container.ticket-detail, .main_container.ticket-search, .showPassenger').toggle();
        angular.element('.main_container.passengers').slideToggle();
        history.pushState({ state: 2 }, "ShowPassenger", "#/bilet-detaylari");
    };

    //Ticket To Email
    $scope.ticketToEmail = function (Email,Send) {
        $http({
            method: "POST",
            url: "/NewPayment/GenerateEmail",
            data: JSON.stringify({ 'SessionId': $scope.Data.SessionId, 'Email': Email, 'Send':Send }),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (response.Status) {
                if (!Send) {
                    var form = '<form name="emailForm" id="emailForm"><div class="form-group" style="float:none;"><label for="email">E-Mail</label><input type="email" name="Email" ng-model="SendeEmail" id="email" required>'
                                + '<span class="form-group-error">'
                                + '</span></div></form>';
                    $.Popup.open({
                        title: 'Bilet Yazdır',
                        type: 'alert',
                        message: "Biletizi yazdırabilir yada email olarak yollayabilirsiniz.",
                        closeBtn: true,
                        buttons: [
                            {
                                Name: 'Kapat',
                                Classes: 'btn-red',
                                Function: function () {
                                    $.Popup.close();
                                }
                            },
                            {
                                Name: 'Yazdır',
                                Classes: 'btn-blue',
                                Function: function () {
                                    $scope.print(response.Data);
                                    $.Popup.close();
                                }
                            },
                            {
                                Name: 'Gönder',
                                Function: function () {
                                    $.Popup.open({
                                        type: 'alert',
                                        message: form,
                                        close: true,
                                        buttons: [
                                            {
                                                Name: 'Kapat',
                                                Classes: 'btn-red',
                                                Function: function () {
                                                    $.Popup.close();
                                                }
                                            },
                                            {
                                                Name: 'Gönder',
                                                Function: function () {
                                                    if (!$('#emailForm').valid()) {
                                                        $('#emailForm').find('.form-group-error').show(); return false;
                                                    } else {
                                                        $scope.ticketToEmail($('#email').val(), true);
                                                        $.Popup.close();
                                                    }
                                                }
                                            }
                                        ]
                                    });
                                }
                            }
                        ]
                    });
                } else {
                    $.Popup.open({ type: 'alert', 'message': response.Message, close: true });
                }
            } else {
                $.Popup.open({type: 'alert', 'message': response.Message, close: true });
            }
        });
    }

    //PrintDiv
    $scope.print = function (data) {
        var popupWin = window.open('', '_blank', 'width=771,height=619');
        popupWin.document.open();
        popupWin.document.write('<html><head><link rel="stylesheet" type="text/css" href="style.css" /></head><body onload="window.print()">' + data + '</body></html>');
        popupWin.document.close();
    }

    //Get ExchangeRateList
    $scope.getExchangeRateList = function () {
        $http({
            method: "POST",
            url: "/TicketDetail/GetExchangeRate",
            data: JSON.stringify(''),
            headers: {
                'Content-Type': 'application/json; charset=utf-8'
            },
        }).success(function (response, status) {
            if (response.Status) {
                $scope.ExchangeRateList = response.Data;
                $scope.safeApply();
            } else {
                $.Popup.open({ type: 'alert', title: 'Uyarı', message: response.Message });
            }
            if (HepStorage.isSet('Exchange')) {
                $scope.oldExChange = HepStorage.get('Exchange');
                $scope.CurrentCurrency.ExchangeRate = $scope.oldExChange.Currency;
            }
        });
    }
 
    //Swicth Language
    $scope.switchLanguage = function (languageKey) {
        if (_.filter($scope.Variables.LanguageList, { key: languageKey }).length < 0) {
            languageKey = "tr";
        }
        $scope.languageKey = languageKey;
        if ($translate.use() == languageKey) {
            return false;
        }

        //productService.all(languageKey, function (query) {
        //    $rootScope.products = query;
        $translate.use(languageKey);
        tmhDynamicLocale.set(languageKey);
        //});
        console.log(languageKey);
        $.datepicker.setDefaults($.datepicker.regional[languageKey]);
        $('#fromDatex').datepicker("setDate", new Date($scope.DefaultSearchData.fromDate));
        $('#toDatex').datepicker("setDate", new Date($scope.DefaultSearchData.toDate));
        $('.datepicker').datepicker('refresh');

        $.each(searchboxLang[languageKey], function (i, e) {
            // $('.searchbox').find('*[data-trans=' + i + ']').html(e);
            if (i == "ERROR") {
                $.each(e, function (ii, ee) {
                    $('.' + ii).find('*[data-msg-required]').data('msg-required', ee);
                });
            }
        });
        $scope.changeTitle();
    };

    //Change Title
    $scope.changeTitle = function () {
        switch ($route.current.$$route.route) {
            case 'SearchListController':
                $scope.Title = $filter('translate')('TITLE.SEARCH') + ' | ' + domain.title;
                break;
            case 'TicketsController':
                $scope.Title = $filter('translate')('TITLE.PASSENGERS') + ' | ' + domain.title;
                break;
            case 'PaymentController':
                $scope.Title = $filter('translate')('TITLE.PAYMENT') + ' | ' + domain.title;
                break;
            case 'ThanksController':
                $scope.Title = $filter('translate')('TITLE.THANKS') + ' | ' + domain.title;
                break;
            default:
                $scope.Title = $filter('translate')('TITLE.SEARCH') + ' | ' + domain.title;
                break;
        }
        $scope.safeApply();
    }

    $scope.$watch("CurrentCurrency.ExchangeRate", function (newVal, oldVal) {
        if ($scope.ExchangeRateList.length) {
            $scope.newCurrency = _.filter($scope.ExchangeRateList, { Currency: newVal })[0];
            $scope.CurrentCurrency.ExchangeRate = $scope.newCurrency.Currency;
            $scope.CurrentCurrency.Symbol = $scope.newCurrency.Symbol;
            $scope.CurrentCurrency.Value = $scope.newCurrency.Value;

            $scope.Filters.GoingPrice = {};
            $scope.Filters.GoingPrice.Limit = {};
            $scope.Filters.GoingPrice.Limit.MinAmount = angular.copy(parseInt($scope.Data.GoingFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value));
            $scope.Filters.GoingPrice.Limit.MaxAmount = angular.copy(parseInt($scope.Data.GoingFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value));
            $scope.Filters.GoingPrice.MinAmount = angular.copy(parseInt($scope.Data.GoingFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value));
            $scope.Filters.GoingPrice.MaxAmount = angular.copy(parseInt($scope.Data.GoingFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value));

            if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                $scope.Filters.ReturnPrice = {};
                $scope.Filters.ReturnPrice.Limit = {};
                $scope.Filters.ReturnPrice.Limit.MinAmount = angular.copy(parseInt($scope.Data.ReturnFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value));
                $scope.Filters.ReturnPrice.Limit.MaxAmount = angular.copy(parseInt($scope.Data.ReturnFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value));
                $scope.Filters.ReturnPrice.MinAmount = angular.copy(parseInt($scope.Data.ReturnFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value));
                $scope.Filters.ReturnPrice.MaxAmount = angular.copy(parseInt($scope.Data.ReturnFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value));
            }

            HepStorage.set('Exchange', $scope.newCurrency);
            $scope.safeApply();
        }
    });

    $scope.$watch("loaded", function (newVal, oldVal) {
        if ($scope.isMobile) $scope.loaded = true;
        if ($scope.loaded) {
            angular.element('.container.search').removeClass('opacity');
        } else {
            angular.element('.container.search').addClass('opacity');
        }
    });
   
    $scope.$on('$routeChangeStart', function (scope, next, current) {
        $timeout(function () {
            $scope.changeTitle();
        },100)
    })

    $timeout(function () {
        $scope.languageKey = 'tr';
        if (typeof Cookies.get('NG_TRANSLATE_LANG_KEY') != 'undefined') {
            $scope.languageKey = Cookies.get('NG_TRANSLATE_LANG_KEY');
        }
        $.datepicker.setDefaults($.datepicker.regional[$scope.languageKey]);
        $('.eight .language').click(function () {
            $(this).toggleClass('hover');
        })
        $('html').click(function (e) {
            if ($(e.target).find('.language.hover').length > 0 || $(e.target).parents('header').length == 0) {
                $('.language').removeClass('hover');
            }
        });
        $scope.loaded = false;
        if (['/', '#/', ''].indexOf(location.hash) > 0 || !$.isEmptyObject($scope.updatePassengerResponse)) {
            var request = {};
            request['request'] = HepStorage.get('searchData');
            request['request'].IsCombine = 1;
            $scope.IsCombine = false;
            $scope.setSearchData(request['request']);
            $scope.searchFunction(request);
          
        } else if (window.location.hash.substring(0, 5) == '#/?q=') {
            //Reklam Store
            var queryParams = $.parseJSON('{"' + decodeURIComponent(escape(window.atob($scope.replaceAll(window.location.hash, '%3D', '=').substring(5, window.location.hash.replace('%3D', '=').length)))).replace(/&/g, '","').replace(/=/g, '":"') + '"}');
            $scope.setSearchData(queryParams);
            $timeout(function () {
                var request = {};
                request['request'] = HepStorage.get('searchData');
                $scope.searchFunction(request);
            }, 100);
        } else if (window.location.hash.substring(0, 12) == '#/?meta=true') {
            //MetaSearch
            var metaQuery = {};
            metaQuery.productId = [];
            subOption = [];
            var u = window.location.hash.substring(13, window.location.hash.length);
            var uparam = u.split("&");
            angular.forEach(uparam, function (e, i) {
                param = e.split('=');
                if (param[0] == 'productId') {
                    metaQuery[param[0]].push(param[1]);
                } else if (param[0] == 'suboption') {
                    subOption.push(param[1]);
                } else {
                    metaQuery[param[0]] = param[1];
                }
            });
            metaQuery.SubOption = subOption;
            metaQuery.classType = metaQuery.cls;
            $.Popup.open({ type: 'loading', message: $filter('translate')('PAYMENT.COMPLETE_RESERVATION') });
            $scope.metaSearch = true;
            $scope.getTicketDetails(metaQuery);
        } else if (window.location.hash.substring(0, 7) == '#/?pnr=') {
            var queryParams = $.parseJSON('{"' + decodeURIComponent(escape(window.location.hash.substring(3, window.location.hash.length))).replace(/&/g, '","').replace(/=/g, '":"') + '"}');
            $scope.getReservationDetail(queryParams.pnr);
        } else {
            //Default
            $scope.DefaultSearchData = HepStorage.get('searchData');
            $scope.setSearchData($scope.DefaultSearchData);
        }
    }, 100);
});

//Search List Controller
searchApp.controller('SearchListController', function ($scope, $http, $timeout, $filter, $window, $location, _) {
    $scope.showHeaderToggle(true);
    $scope.showSearchBoxToggle(true);
    $scope.stepLineToggle(false);
    $scope.goBackToggle(true, 'Home');
    if (HepStorage.isSet('allocateResponse')) {
        $scope.TicketDetail = [];
    }
    if (window.isMobile) angular.element('.float-nav').show();
    angular.element('.float-nav').click(function () { $('.main-nav,.menu-btn').toggleClass('active') });

    $('.step-line .circle:nth-child(2),.step-line .circle:nth-child(3)').removeClass('active');
    $('.step-line .line').animate({ width: '0%' }, 1500, function () { $('.step-line .circle:nth-child(1)').addClass('active') });
    $('.filters .form-group label:first-child').click(function () {
        $('.filters .form-group').removeClass('active');
        $(this).parent('.form-group').addClass('active');
    });

    angular.element($window).bind("scroll", function (e) {
        if ((($('html').height() - $(window).scrollTop()) - ($('footer').height() + 100)) < $(window).height()) {
            $scope.combineLimit = $scope.combineLimit + 10;
            $scope.safeApply();
        }
    })

    //Show Contiune Button
    $scope.contiuneBtn = function () {
        return ($scope.TicketDetail.realLength() == 1 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay) || ($scope.TicketDetail.realLength() == 2 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return);
    };

    //Toggle List Header
    $scope.toggleListHeader = function (list, show) {
        if ($scope.Variables.isMobile) {
            var listEl = list == 0 ? '.going' : '.return';
            if (show) {
                $(listEl).find('.list-header,.filter').slideDown();
            } else {
                $(listEl).find('.list-header,.filter').slideUp();
            }
        }
    }

    //Selected Ticket Animation
    $scope.ticketFly = function (FlightId) {
        var pos = $('#g-' + FlightId)[0].getBoundingClientRect();
        $('#g-' + FlightId).css('position', 'fixed');
        $('#g-' + FlightId).css('z-index', '1');
        $.each(pos, function (i, e) {
            if (i == 'left') { e = e - 4.5; }
            if (i == 'top') { e = (e) - 2.5; }
            if (i == 'width') { e = 'calc(100% - 10px)'; }
            if (i != 'x' && i != 'y' && i != 'toJSON') {
                $('#g-' + FlightId).css(i, e);
            }
        });
        $('#g-' + FlightId).css('position', 'absolute');
        $('#g-' + FlightId).css('left', '0');
        $('html, body').animate({ scrollTop: $('.going .list-header').offset().top }, 1000);
        $('.flight-list.going .ticket').first().animate({ 'margin-top': $scope.Variables.isMobile ? pos.height + 57 : pos.height + 7 }, 1000);
        $('#g-' + FlightId).animate({
            top: $('.flight-list.going .ticket').first().offset().top - ($('.flight-list.going .list-header').offset().top + ($scope.Variables.isMobile ? 43 : 2))
        }, 1000, function () {
            $('#g-' + FlightId).css('position', 'absolute');
        });
    };

    //Choose Flight
    $scope.chooseFlight = function (Listkey, selected, key) {
        if (Listkey == 0 && $scope.IsCombine) {
            $scope.TicketDetail[0] = selected[0];
            $scope.TicketDetail[1] = selected[1];
            $scope.allocateBtn();
            return false;
        }
        if (Listkey == 0) {
            $('.flight-list.going .ticket').css('cssText', '');
        }
        //Remove Flight
        if (typeof $scope.TicketDetail[Listkey] != 'undefined' && $scope.TicketDetail[Listkey].FlightId == selected.FlightId) {
            var saveTicket = Listkey == 1 ? $scope.TicketDetail.slice(0, 1)[0] : $scope.TicketDetail.slice(1, 2)[0];
            $scope.TicketDetail = [];
            if (Listkey == 0) {
                if (typeof saveTicket != 'undefined') {
                    //$scope.TicketDetail[1] = saveTicket;
                    $scope.TicketDetail = [];
                }
                $('.container.search').addClass('international');
                if (!$scope.Variables.isMobile) {
                    $scope.filters_toggle(true);
                }
            } else {
                if (typeof saveTicket != 'undefined') {
                    $scope.TicketDetail[0] = saveTicket;
                }
            }

            if (Listkey == 0 && $scope.isDomestic) {
                $('.going .ticket').css('display', 'block');
                $scope.GoingFilter = true;
                $scope.toggleListHeader(Listkey, true);
            } else if (Listkey == 1 && $scope.isDomestic) {
                $scope.ReturnFlightList = $scope.Data.ReturnFlightList;
                $scope.ReturnFilter = true;
                $scope.toggleListHeader(Listkey, true);
            } else if (!$scope.isDomestic) {
                if (Listkey == 0) {
                    $scope.GoingFilter = true;
                } else if (typeof $scope.TicketDetail[0] != 'undefined') {
                    //$scope.ReturnFlightList = _.filter($scope.RReturnFlightList, { ProductId: $scope.TicketDetail[0].ProductId });
                    $scope.ReturnFlightList = $scope.RReturnFlightList;
                    $scope.ReturnFilter = true;
                } else {
                    $scope.ReturnFlightList = angular.copy($scope.Data.ReturnFlightList);
                }
                $scope.toggleListHeader(Listkey, true);
            }
            $scope.goingListIsOpen = $scope.GoingFlightList.length == $scope.Data.GoingFlightList.length;
            $scope.returnListIsOpen = $scope.ReturnFlightList.length == $scope.Data.ReturnFlightList.length;

            //Mobil
            if (angular.element(window).width() <= 1000 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                if (($scope.goingListIsOpen && $scope.returnListIsOpen) || $scope.goingListIsOpen) {
                    angular.element('.range-calender .going').show();
                    angular.element('.range-calender .return').hide();
                } else if ($scope.returnListIsOpen && !$scope.goingListIsOpen) {
                    angular.element('.range-calender .going').hide();
                    angular.element('.range-calender .return').show();
                }
            }
            $scope.safeApply();
            return false;
        }

        //Add Going
        if ((Listkey == 0 && typeof $scope.TicketDetail[Listkey] == 'undefined') || (typeof $scope.TicketDetail[Listkey] != 'undefined' && $scope.TicketDetail[Listkey].FlightId != selected.FlightId)) {
            $scope.GoingFilter = false;
            $scope.TicketDetail[Listkey] = selected;
            if ($scope.Variables.isMobile && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                $('.going .ticket').not('#g-' + selected.FlightId).css('display', 'none');
            } else {
                if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                    if (key > 0 && !$scope.Variables.isMobile) {
                        $scope.ticketFly(selected.FlightId);
                    }
                    $('.container.search').removeClass('international');
                }
            }
            $scope.toggleListHeader(Listkey, false);
            if (!$scope.isDomestic || $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                $scope.filters_toggle(false);
            }
            if (!$scope.isDomestic) {
                $scope.toggleListHeader(1, true);
            }
            if ($scope.DefaultSearchData.flightType != $scope.Variables.FlightType.OneWay) {
                angular.element('.flight-list.return').addClass('ng-show');
            }
        }

        //Add Return
        if ((Listkey == 1 && typeof $scope.TicketDetail[Listkey] == 'undefined') || (typeof $scope.TicketDetail[Listkey] != 'undefined' && $scope.TicketDetail[Listkey].FlightId != selected.FlightId)) {
            if ($scope.ReturnFlightList.length == 1) {
                $scope.showReturnShowAll = false;
            } else {
                $scope.showReturnShowAll = true;
            }
            $scope.ReturnFilter = false;
            $scope.TicketDetail[Listkey] = selected;
            $scope.toggleListHeader(Listkey, false);
            $scope.safeApply();
        }

        //International Return Filter
        if (!$scope.isDomestic) {
            if (Listkey == 0 && (typeof $scope.TicketDetail[1] == 'undefined' || (typeof $scope.TicketDetail[1] != 'undefined' && $scope.TicketDetail[0].ProductId != $scope.TicketDetail[1].ProductId))) {
                //$scope.ReturnFlightList = _.filter($scope.RReturnFlightList, { ProductId: $scope.TicketDetail[0].ProductId });
                $scope.ReturnFlightList = $scope.RReturnFlightList;
                delete $scope.TicketDetail[1];
                if ($scope.ReturnFlightList.length == 1) {
                    $scope.showReturnShowAll = false;
                }
            }


            if (Listkey == 1 && typeof $scope.TicketDetail[0] == 'undefined' && typeof $scope.TicketDetail[1] == 'undefined') {
                $scope.ReturnFlightList = angular.copy($scope.Data.ReturnFlightList);
            }
        }

        //Same Date
        if ($scope.DefaultSearchData.fromDate == $scope.DefaultSearchData.toDate && $scope.TicketDetail.realLength() == 1 && $scope.isDomestic) {
            if (Listkey == 0) {
                var segmentCount = $scope.TicketDetail[0].SegmentList.length - 1;
                var goingTime = new Date($scope.TicketDetail[0].SegmentList[segmentCount].ArrivalDate.substr(0, 10) + 'T' + $scope.TicketDetail[0].SegmentList[segmentCount].ArrivalTime.substr(0, 10)).getTime() + 3600000;
                $scope.ReturnFlightList = _.filter($scope.Data.ReturnFlightList, function (v) { return new Date(v.SegmentList[0].DepartureDate.substr(0, 10) + 'T' + v.SegmentList[0].DepartureTime.substr(0, 10)).getTime() >= goingTime });
                if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                    $.Notification.open({
                        type: 'alert',
                        message: $filter('translate')('SAME_DATE'),
                        buttons: [
                        {
                            Name: $filter('translate')('SEARCHBOX.CLOSE'),
                            Function: function () {
                                $.Popup.close();
                            }
                        }
                        ]
                    });
                }
            }
            if (Listkey == 1) {
                var segmentCount = $scope.TicketDetail[1].SegmentList.length - 1;
                var returnTime = new Date($scope.TicketDetail[1].SegmentList[segmentCount].DepartureDate.substr(0, 10) + 'T' + $scope.TicketDetail[1].SegmentList[segmentCount].DepartureTime.substr(0, 10)).getTime() + 3600000;
                $scope.GoingFlightList = _.filter($scope.Data.GoingFlightList, function (v) { return new Date(v.SegmentList[0].ArrivalDate.substr(0, 10) + 'T' + v.SegmentList[0].ArrivalTime.substr(0, 10)).getTime() <= returnTime });
                if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                    $.Notification.open({ type: 'alert', message: 'Gidiş-dönüş tarihi aynı olan aramalarda dönüş uçuşları varış saatinize göre filtrelenebilir.' });
                }
            }
        } else if ($scope.DefaultSearchData.fromDate == $scope.DefaultSearchData.toDate && $scope.TicketDetail.realLength() == 2) {
            var goingSegment = $scope.TicketDetail[0].SegmentList.realLength() - 1
            var returnSegment = $scope.TicketDetail[1].SegmentList.realLength() - 1;
            var goingArrivalTime = new Date($scope.TicketDetail[0].SegmentList[goingSegment].ArrivalDate.substr(0, 10) + 'T' + $scope.TicketDetail[0].SegmentList[goingSegment].ArrivalTime.substr(0, 10)).getTime() + 3600000;
            var returnDepartureTime = new Date($scope.TicketDetail[1].SegmentList[returnSegment].DepartureDate.substr(0, 10) + 'T' + $scope.TicketDetail[1].SegmentList[returnSegment].DepartureTime.substr(0, 10)).getTime();
            if (goingArrivalTime > returnDepartureTime) {
                $.Popup.open({
                    type: 'alert',
                    message: $filter('translate')('CLOCK_ALERT'),
                    buttons: [
                        {
                            Name: $filter('translate')('SEARCHBOX.CLOSE'),
                            Function: function () {
                                $.Popup.close();
                            }
                        }
                    ]
                });
                if (Listkey == 0) {
                    $scope.TicketDetail = $scope.TicketDetail.splice(1, 1);
                    $scope.GoingFlightList = $scope.Data.GoingFlightList;

                } else if (Listkey == 1) {
                    $scope.TicketDetail = $scope.TicketDetail.splice(0, 1);
                    $scope.ReturnFlightList = $scope.Data.ReturnFlightList;
                }
                $scope.toggleListHeader(Listkey, true);
                return false;
            }
        }

        $scope.totalMount = 0;
        if ($scope.TicketDetail.realLength() == 1 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay) {
            $scope.totalMount = $scope.TicketDetail[0].TotalFee;
        }
        if ($scope.TicketDetail.realLength() == 2 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
            $scope.totalMount = $scope.TicketDetail[0].TotalFee + $scope.TicketDetail[1].TotalFee;
        }
        $scope.goingListIsOpen = $scope.GoingFlightList.length == $scope.Data.GoingFlightList.length;
        $scope.returnListIsOpen = $scope.ReturnFlightList.length == $scope.Data.ReturnFlightList.length;
        if (angular.element(window).width() <= 1000 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
            if (($scope.goingListIsOpen && $scope.returnListIsOpen) || $scope.goingListIsOpen) {
                angular.element('.range-calender .going').show();
                angular.element('.range-calender .return').hide();
            } else if ($scope.returnListIsOpen && !$scope.goingListIsOpen) {
                angular.element('.range-calender .going').hide();
                angular.element('.range-calender .return').show();
            }
        }
        if ($scope.Variables.isMobile && Listkey != 2) {
            $window.scrollTo(0, 0);
        }
        if (!$scope.Variables.isMobile && ((Listkey == 0 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay) || (Listkey == 1 && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return))) {
            $timeout(function () {
                $scope.allocateBtn();
            }, 100);
        }
        $scope.safeApply();
    };

    //MobileChooseFlight
    $scope.mobileChooseFlight = function (Listkey, key) {
        if ($scope.Variables.isMobile) {
            $scope.chooseFlight(Listkey, key);
            return false;
        }
    }

    //Search Filters
    $scope.searchFilter = function () {
        var airLines = [];
        var airPorts = [];
        var filterArray = [];
        var transferCount = [];
        var newGoingFlightList = [];
        var newReturnFlightList = [];
        $scope.combineLimit = 30;

        angular.forEach($scope.Filters.SelectedAirLines, function (value, key) {
            if (value) airLines.push(key);
        });

        angular.forEach($scope.Filters.SelectedAirPorts, function (value, key) {
            if (value) airPorts.push(key);
        });

        $scope.Filters.SelectedStop = false;
        angular.forEach($scope.Filters.SelectedStopCount, function (value, key) {
            if (value) {
                transferCount.push(parseInt(key));
                $scope.Filters.SelectedStop = true;
            }
        });

        if ($scope.IsCombine) {
            angular.forEach($scope.Data.InternationalFlightList, function (value, key) {
                filterArray = [];
                var filter = true;
                if ($scope.Filters.promo) {
                    filterArray.push((value[0].IsPromo && value[1].IsPromo) ? true : false);
                }

                if ($scope.Filters.directFlights) {
                    filterArray.push((value[0].StopCount == 0 && value[1].StopCount == 0) ? true : false);
                }
                if ($scope.Filters.isRefundable) {
                    filterArray.push((value[0].IsRefundable && value[1].IsRefundable) ? true : false);
                }

                var goingFlights = value[0].SegmentList;
                var returnFlights = value[1].SegmentList;

                if (airLines.length > 0 || airPorts.length > 0) {
                    angular.forEach(goingFlights, function (sValue, sKey) {
                        if (airLines.length > 0) {
                            filterArray.push(airLines.indexOf(sValue.MarketingAirline) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }

                        if (airPorts.length > 0) {
                            filterArray.push(airPorts.indexOf(sValue.ArrivalAirport) > -1 || airPorts.indexOf(sValue.DepartureAirport) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }
                    });

                    angular.forEach(returnFlights, function (sValue, sKey) {
                        if (airLines.length > 0) {
                            filterArray.push(airLines.indexOf(sValue.MarketingAirline) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }

                        if (airPorts.length > 0) {
                            filterArray.push(airPorts.indexOf(sValue.ArrivalAirport) > -1 || airPorts.indexOf(sValue.DepartureAirport) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }
                    });
                }

                if (transferCount.length > 0) {
                    filterArray.push(transferCount.indexOf(value[0].StopCount) > -1 ? true : false);
                    filterArray.push(transferCount.indexOf(value[1].StopCount) > -1 ? true : false);
                }

                if ($scope.Filters.GoingPrice.MinAmount != $scope.Filters.GoingPrice.Limit.MinAmount || $scope.Filters.GoingPrice.MaxAmount != $scope.Filters.GoingPrice.Limit.MaxAmount) {
                    filterArray.push($scope.Filters.GoingPrice.MinAmount <= ((value[0].TotalFee * 2) / $scope.CurrentCurrency.Value) && ((value[0].TotalFee * 2) / $scope.CurrentCurrency.Value) <= $scope.Filters.GoingPrice.MaxAmount ? true : false);
                }

                if ($scope.Filters.GoingDepartureTimeRange.MinTime != $scope.Filters.GoingDepartureTimeRange.MinTimeVal || $scope.Filters.GoingDepartureTimeRange.MaxTime != $scope.Filters.GoingDepartureTimeRange.MaxTimeVal) {
                    var departureTime = value[0].SegmentList[0].DepartureTime.split(":");
                    filterArray.push($scope.Filters.GoingDepartureTimeRange.MinTimeVal <= parseInt(departureTime[0]) && parseInt(departureTime[0]) <= $scope.Filters.GoingDepartureTimeRange.MaxTimeVal ? true : false);
                }

                if ($scope.Filters.ReturnDepartureTimeRange.MinTime != $scope.Filters.ReturnDepartureTimeRange.MinTimeVal || $scope.Filters.ReturnDepartureTimeRange.MaxTime != $scope.Filters.ReturnDepartureTimeRange.MaxTimeVal) {
                    var arrivalTime = value[1].SegmentList[0].DepartureTime.split(":");
                    filterArray.push($scope.Filters.ReturnDepartureTimeRange.MinTimeVal <= parseInt(arrivalTime[0]) && parseInt(arrivalTime[0]) <= $scope.Filters.ReturnDepartureTimeRange.MaxTimeVal ? true : false);
                }

                if (filterArray.indexOf(false) < 0) {
                    newGoingFlightList.push(value);
                }
            });

            switch ($scope.Filters.Sorting.Going) {
                case "1":
                    newGoingFlightList = newGoingFlightList;
                    break;

                case "2":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item[0].TotalFee; }).reverse();
                    break;

                case "3":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item[0].SegmentList[0].DepartureTime; });
                    break;

                case "4":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item[0].SegmentList[0].DepartureTime; }).reverse();
                    break;

                case "5":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) {
                        return item[0].SegmentList[item[0].StopCount].ArrivalTime;
                    });
                    break;

                case "6":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) {
                        return item[0].SegmentList[item[0].StopCount].ArrivalTime;
                    }).reverse();
                    break;

                default:
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item.TotalFee; });
                    break;
            }
            if ($scope.Filters.SelectedStop == false) {
                newGoingFlightList = [];
            }
            $scope.InternationalFlightList = newGoingFlightList;
        }
        if ($scope.GoingFilter && !$scope.IsCombine) {
            angular.forEach($scope.Data.GoingFlightList, function (value, key) {
                filterArray = [];
                var filter = true;
                if ($scope.Filters.promo) {
                    filterArray.push((value.IsPromo) ? true : false);
                }

                if ($scope.Filters.directFlights) {
                    filterArray.push((value.SegmentList.length == 1) ? true : false);
                }
                if ($scope.Filters.isRefundable) {
                    filterArray.push((value.IsRefundable) ? true : false);
                }
                if (airLines.length > 0 || airPorts.length > 0) {
                    angular.forEach(value.SegmentList, function (sValue, sKey) {
                        if (airLines.length > 0) {
                            filterArray.push(airLines.indexOf(sValue.MarketingAirline) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }

                        if (airPorts.length > 0) {
                            filterArray.push(airPorts.indexOf(sValue.ArrivalAirport) > -1 || airPorts.indexOf(sValue.DepartureAirport) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }
                    });
                }

                if (transferCount.length > 0) {
                    filterArray.push(transferCount.indexOf(value.StopCount) > -1 ? true : false);
                }

                if ($scope.Filters.GoingPrice.MinAmount != $scope.Filters.GoingPrice.Limit.MinAmount || $scope.Filters.GoingPrice.MaxAmount != $scope.Filters.GoingPrice.Limit.MaxAmount) {
                    filterArray.push($scope.Filters.GoingPrice.MinAmount <= (value.TotalFee / $scope.CurrentCurrency.Value) && (value.TotalFee / $scope.CurrentCurrency.Value) <= $scope.Filters.GoingPrice.MaxAmount ? true : false);
                }

                if ($scope.Filters.GoingDepartureTimeRange.MinTime != $scope.Filters.GoingDepartureTimeRange.MinTimeVal || $scope.Filters.GoingDepartureTimeRange.MaxTime != $scope.Filters.GoingDepartureTimeRange.MaxTimeVal) {
                    var departureTime = value.SegmentList[0].DepartureTime.split(":");
                    filterArray.push($scope.Filters.GoingDepartureTimeRange.MinTimeVal <= parseInt(departureTime[0]) && parseInt(departureTime[0]) <= $scope.Filters.GoingDepartureTimeRange.MaxTimeVal ? true : false);
                }

                if ($scope.Filters.GoingArrivalTimeRange.MinTime != $scope.Filters.GoingArrivalTimeRange.MinTimeVal || $scope.Filters.GoingArrivalTimeRange.MaxTime != $scope.Filters.GoingArrivalTimeRange.MaxTimeVal) {
                    var arrivalTime = value.SegmentList[value.StopCount].ArrivalTime.split(":");
                    filterArray.push($scope.Filters.GoingArrivalTimeRange.MinTimeVal <= parseInt(arrivalTime[0]) && parseInt(arrivalTime[0]) <= GoingArrivalTimeRange.MaxTimeVal ? true : false);
                }

                if (filterArray.indexOf(false) < 0) {
                    newGoingFlightList.push(value);
                }
            });

            switch ($scope.Filters.Sorting.Going) {
                case "1":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item.TotalFee; });
                    break;

                case "2":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item.TotalFee; }).reverse();
                    break;

                case "3":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item.SegmentList[0].DepartureTime; });
                    break;

                case "4":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item.SegmentList[0].DepartureTime; }).reverse();
                    break;

                case "5":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) {
                        var count = item.SegmentList.length - 1;
                        return item.SegmentList[count].ArrivalTime;
                    });
                    break;

                case "6":
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) {
                        var count = item.SegmentList.length - 1;
                        return item.SegmentList[count].ArrivalTime;
                    }).reverse();
                    break;

                default:
                    newGoingFlightList = _.sortBy(newGoingFlightList, function (item) { return item.TotalFee; });
                    break;
            }
            if ($scope.Filters.SelectedStop == false) {
                newGoingFlightList = [];
            }
            $scope.GoingFlightList = newGoingFlightList;
        }
        if ($scope.ReturnFilter && $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return && !$scope.IsCombine) {
            angular.forEach($scope.Data.ReturnFlightList, function (value, key) {
                filterArray = [];
                var filter = true;
                if ($scope.Filters.promo) {
                    filterArray.push((value.IsPromo) ? false : true);
                }

                if ($scope.Filters.directFlights) {
                    filterArray.push((value.SegmentList.length == 1) ? true : false);
                }

                if ($scope.Filters.isRefundable) {
                    filterArray.push((value.IsRefundable) ? true : false);
                }
				
                if (airLines.length > 0 || airPorts.length > 0) {
                    angular.forEach(value.SegmentList, function (sValue, sKey) {
                        if (airLines.length > 0) {
                            filterArray.push(airLines.indexOf(sValue.MarketingAirline) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }
                        if (airPorts.length > 0) {
                            filterArray.push(airPorts.indexOf(sValue.ArrivalAirport) > -1 || airPorts.indexOf(sValue.DepartureAirport) > -1 ? true : false);
                        } else {
                            filterArray.push(false);
                        }
                    });
                }

                if (transferCount.length > 0) {
                    filterArray.push(transferCount.indexOf(value.StopCount) > -1 ? true : false);
                }

                if ($scope.Filters.ReturnPrice.MinAmount != $scope.Filters.ReturnPrice.Limit.MinAmount || $scope.Filters.ReturnPrice.MaxAmount != $scope.Filters.ReturnPrice.Limit.MaxAmount) {
                    filterArray.push($scope.Filters.ReturnPrice.MinAmount <= (value.TotalFee / $scope.CurrentCurrency.Value) && (value.TotalFee / $scope.CurrentCurrency.Value) <= $scope.Filters.ReturnPrice.MaxAmount ? true : false);
                }

                if ($scope.Filters.ReturnDepartureTimeRange.MinTime != $scope.Filters.ReturnDepartureTimeRange.MinTimeVal || $scope.Filters.ReturnDepartureTimeRange.MaxTime != $scope.Filters.ReturnDepartureTimeRange.MaxTimeVal) {
                    var departureTime = value.SegmentList[0].DepartureTime.split(":");
                    filterArray.push($scope.Filters.ReturnDepartureTimeRange.MinTimeVal <= parseInt(departureTime[0]) && parseInt(departureTime[0]) <= $scope.Filters.ReturnDepartureTimeRange.MaxTimeVal ? true : false);
                }

                if ($scope.Filters.ReturnArrivalTimeRange.MinTime != $scope.Filters.ReturnArrivalTimeRange.MinTimeVal || $scope.Filters.ReturnArrivalTimeRange.MaxTime != $scope.Filters.ReturnArrivalTimeRange.MaxTimeVal) {
                    var arrivalTime = value.SegmentList[value.StopCount].ArrivalTime.split(":");
                    filterArray.push($scope.Filters.ReturnArrivalTimeRange.MinTimeVal <= parseInt(arrivalTime[0]) && parseInt(arrivalTime[0]) <= $scope.Filters.ReturnArrivalTimeRange.MaxTimeVal ? true : false);
                }

                if (filterArray.indexOf(false) < 0) {
                    newReturnFlightList.push(value);
                }
            });

            switch ($scope.Filters.Sorting.Return) {
                case "1":
                    newReturnFlightList = _.sortBy(newReturnFlightList, function (item) { return item.TotalFee; });
                    break;

                case "2":
                    newReturnFlightList = _.sortBy(newReturnFlightList, function (item) { return item.TotalFee; }).reverse();
                    break;

                case "3":
                    newReturnFlightList = _.sortBy(newReturnFlightList, function (item) { return item.SegmentList[0].DepartureTime; });
                    break;

                case "4":
                    newReturnFlightList = _.sortBy(newReturnFlightList, function (item) { return item.SegmentList[0].DepartureTime; }).reverse();
                    break;

                case "5":
                    newReturnFlightList = _.sortBy(newReturnFlightList, function (item) {
                        var count = item.SegmentList.length - 1;
                        return item.SegmentList[count].ArrivalTime;
                    });
                    break;

                case "6":
                    newReturnFlightList = _.sortBy(newReturnFlightList, function (item) {
                        var count = item.SegmentList.length - 1;
                        return item.SegmentList[count].ArrivalTime;
                    }).reverse();
                    break;

                default:
                    newReturnFlightList = _.sortBy(newReturnFlightList, function (item) { return item.TotalFee; });
                    break;
            }
            if ($scope.Filters.SelectedStop == false) {
                newReturnFlightList = [];
            }
            $scope.ReturnFlightList = newReturnFlightList;
        }
    };

    //Show All
    $scope.showAll = function (list) {
        if (list == 0) {
            $scope.GoingFlightList = $scope.Data.GoingFlightList;
            $scope.GoingFilter = true;
            $('.flight-list.going .ticket').css('cssText', '');
        }
        if (list == 1 || list == 0) {
            if (!$scope.isDomestic && typeof $scope.TicketDetail[0] != 'undefined') {
                //$scope.ReturnFlightList = _.filter($scope.RReturnFlightList, { ProductId: $scope.TicketDetail[0].ProductId });
                $scope.ReturnFlightList = angular.copy($scope.RReturnFlightList);
            } else {
                $scope.ReturnFlightList = angular.copy($scope.ReturnFlightList);
            }
            $scope.showReturnShowAll = false;
            $scope.ReturnFilter = true;
        }
        if (list == 3) {
            $scope.InternationalFlightList = angular.copy($scope.Data.InternationalFlightList);
        }
        $scope.Filters.promo = false;
        if ($scope.DefaultSearchData.directFlights == false) {
            $scope.Filters.isRefundable = false;
        }

        if ($scope.Data.GoingFlightList.length > 0) {
            $scope.Filters.GoingPrice.MinAmount = Math.floor($scope.Data.GoingFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.GoingPrice.MaxAmount = Math.ceil($scope.Data.GoingFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);

            if (typeof $scope.Filters.GoingDepartureTimeRange != 'undefined') {
                $scope.Filters.GoingDepartureTimeRange.MinTimeVal = $scope.Filters.GoingDepartureTimeRange.MinTime;
                $scope.Filters.GoingDepartureTimeRange.MaxTimeVal = $scope.Filters.GoingDepartureTimeRange.MaxTime;
                $scope.Filters.GoingArrivalTimeRange.MinTimeVal = $scope.Filters.GoingArrivalTimeRange.MinTime;
                $scope.Filters.GoingArrivalTimeRange.MaxTimeVal = $scope.Filters.GoingArrivalTimeRange.MaxTime;
            }
            $scope.Filters.Sorting.Going = '1';
        }

        if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return && $scope.Data.ReturnFlightList.length > 0) {
            $scope.Filters.ReturnPrice.MinAmount = Math.floor($scope.Data.ReturnFilters.PriceRange.MinAmount / $scope.CurrentCurrency.Value);
            $scope.Filters.ReturnPrice.MaxAmount = Math.ceil($scope.Data.ReturnFilters.PriceRange.MaxAmount / $scope.CurrentCurrency.Value);
            
            if (typeof $scope.Filters.ReturnDepartureTimeRange != 'undefined') {
                $scope.Filters.ReturnDepartureTimeRange.MinTimeVal = $scope.Filters.ReturnDepartureTimeRange.MinTime;
                $scope.Filters.ReturnDepartureTimeRange.MaxTimeVal = $scope.Filters.ReturnDepartureTimeRange.MaxTime;
                $scope.Filters.ReturnArrivalTimeRange.MinTimeVal = $scope.Filters.ReturnArrivalTimeRange.MinTime;
                $scope.Filters.ReturnArrivalTimeRange.MaxTimeVal = $scope.Filters.ReturnArrivalTimeRange.MaxTime;
            }
            $scope.Filters.Sorting.Return = '1';
        }

        angular.forEach($scope.Filters.SelectedAirPorts, function (e, i) {
            $scope.Filters.SelectedAirPorts[i] = true;
        });
        angular.forEach($scope.Filters.SelectedAirLines, function (e, i) {
            $scope.Filters.SelectedAirLines[i] = true;
        });
        angular.forEach($scope.Filters.SelectedStopCount, function (e, i) {
            $scope.Filters.SelectedStopCount[i] = true;
        })

        $scope.airPortsToggle(true);
        $scope.airLinesToggle(true);
        if (list == 0) {
            $scope.TicketDetail = [];
            $scope.toggleListHeader(0, true);
            $scope.toggleListHeader(1, true);
        } else {
            var saveTicket = $scope.TicketDetail[0];
            $scope.TicketDetail = [];
            if (typeof saveTicket != 'undefined') {
                $scope.TicketDetail[0] = saveTicket;
            }
            $scope.toggleListHeader(1, true);
        }
      
        $scope.Filters = $scope.DefaultFilters;
        $scope.safeApply();
    };

    //Next Date
    $scope.nextDate = function (list) {
        $scope.TicketDetail.splice(list, 1);
        $scope.showAll(list);
        var requestData = HepStorage.get('searchData');
        var Datee = list == 0 ? requestData.fromDate.split('-') : requestData.toDate.split('-');

        var tomorrow = new Date(parseInt(Datee[2]), parseInt(Datee[1]) - 1, parseInt(Datee[0]), 2, 0, 0, 0);
        tomorrow = new Date(tomorrow).setDate(tomorrow.getDate() + 1);
        var newDay = new Date(tomorrow).getDate().toString().length == 1 ? "0" + new Date(tomorrow).getDate().toString() : new Date(tomorrow).getDate().toString();
        var newMonth = (new Date(tomorrow).getMonth() + 1).toString().length == 1 ? "0" + (new Date(tomorrow).getMonth() + 1).toString() : (new Date(tomorrow).getMonth() + 1).toString();
        var newYear = new Date(tomorrow).getFullYear();

        if (list == 0) {
            requestData.fromDate = newDay + '-' + newMonth + '-' + newYear;
            requestData.fromDatex = newDay + ' ' + $scope.Variables.nameOfMonth[(new Date(tomorrow).getMonth() + 1)] + ', ' + $scope.Variables.nameOfDays[new Date(tomorrow).getDay()];
            angular.element('#fromDate').val(requestData.fromDate);
            angular.element('#fromDatex').val(requestData.fromDatex);
        } else {
            requestData.toDate = newDay + '-' + newMonth + '-' + newYear;
            requestData.toDatex = newDay + ' ' + $scope.Variables.nameOfMonth[(new Date(tomorrow).getMonth() + 1)] + ', ' + $scope.Variables.nameOfDays[new Date(tomorrow).getDay()];
            angular.element('#toDate').val(requestData.toDate);
            angular.element('#toDatex').val(requestData.toDatex);
        }
        var request = {};
        request['request'] = requestData;
        HepStorage.set('newSearch', true);
        HepStorage.set('searchDataTime', Date.now());
        $scope.searchFunction(request);
    }

    //Prev Date
    $scope.prevDate = function (list) {
        $scope.TicketDetail.splice(list, 1);
        $scope.showAll(list);
        var requestData = HepStorage.get('searchData');
        var Datee = list == 0 ? requestData.fromDate.split('-') : requestData.toDate.split('-');

        var yesterday = new Date(parseInt(Datee[2]), parseInt(Datee[1]) - 1, parseInt(Datee[0]), 2, 0, 0, 0);
        yesterday = new Date(yesterday).setDate(yesterday.getDate() - 1);
        var newDay = new Date(yesterday).getDate().toString().length == 1 ? "0" + new Date(yesterday).getDate().toString() : new Date(yesterday).getDate().toString();
        var newMonth = (new Date(yesterday).getMonth() + 1).toString().length == 1 ? "0" + (new Date(yesterday).getMonth() + 1).toString() : (new Date(yesterday).getMonth() + 1).toString();
        var newYear = new Date(yesterday).getFullYear();

        if (list == 0) {
            requestData.fromDate = newDay + '-' + newMonth + '-' + newYear;
            requestData.fromDatex = newDay + ' ' + $scope.Variables.nameOfMonth[(new Date(yesterday).getMonth() + 1)] + ', ' + $scope.Variables.nameOfDays[new Date(yesterday).getDay()];
            angular.element('#fromDate').val(requestData.fromDate);
            angular.element('#fromDatex').val(requestData.fromDatex);
        } else {
            requestData.toDate = newDay + '-' + newMonth + '-' + newYear;
            requestData.toDatex = newDay + ' ' + $scope.Variables.nameOfMonth[(new Date(yesterday).getMonth() + 1)] + ', ' + $scope.Variables.nameOfDays[new Date(yesterday).getDay()];
            angular.element('#toDate').val(requestData.toDate);
            angular.element('#toDatex').val(requestData.toDatex);
        }
        var request = {};
        request['request'] = requestData;
        HepStorage.set('newSearch', true);
        HepStorage.set('searchDataTime', Date.now());
        $scope.searchFunction(request);
    }

    //Jump Date
    $scope.jumpDate = function (list, date) {
        $scope.TicketDetail.splice(list, 1);
        $scope.showAll(list);
        var requestData = HepStorage.get('searchData');
        var date = date.split('-').reverse().join('-');
        var fromDate = requestData.fromDate.split('-').reverse().join('-');
        var toDate = requestData.toDate.split('-').reverse().join('-');

        if (list == 0) {
            requestData.fromDate = date;
            if (requestData.fromDate == requestData.toDate && Date.parse(date) > Date.parse(fromDate)) {
                requestData.toDate = date;
            }
        } else {
            requestData.toDate = date;
            if (requestData.fromDate == requestData.toDate && Date.parse(date) < Date.parse(toDate)) {
                requestData.fromDate = date;
            }
        }

        fromDateArr = requestData.fromDate.split('-');
        toDateArr = requestData.toDate.split('-');
        angular.element('#fromDate').val(requestData.fromDate);
        angular.element('#fromDatex').val(fromDateArr[0] + ' ' + $scope.Variables.nameOfMonth[parseInt(fromDateArr[1])] + ', ' + $scope.Variables.nameOfDays[new Date(fromDateArr[1] + '-' + fromDateArr[0] + '-' + fromDateArr[2]).getDay()]);
        angular.element('#toDate').val(requestData.toDate);
        angular.element('#toDatex').val(toDateArr[0] + ' ' + $scope.Variables.nameOfMonth[parseInt(toDateArr[1])] + ', ' + $scope.Variables.nameOfDays[new Date(toDateArr[1] + '-' + toDateArr[0] + '-' + toDateArr[2]).getDay()]);

        var request = {};
        request['request'] = requestData;
        HepStorage.set('newSearch', true);
        HepStorage.set('searchDataTime', Date.now());
        $scope.searchFunction(request);
    }

    //Select Only AirPort
    $scope.onlyAirPort = function (code) {
        angular.forEach($scope.Filters.SelectedAirPorts, function (e, i) {
            $scope.Filters.SelectedAirPorts[i] = false;
            if (i == code) {
                $scope.Filters.SelectedAirPorts[i] = true;
            }
            $scope.airPortsSelected = false;
        });
    }

    //Select Only Airline
    $scope.onlyAirline = function (code) {
        angular.forEach($scope.Filters.SelectedAirLines, function (e, i) {
            $scope.Filters.SelectedAirLines[i] = false;
            if (i == code) {
                $scope.Filters.SelectedAirLines[i] = true;
            }
        });
        $scope.airLinesSelected = false;
    }

    //Select Only Transfer
    $scope.onlyTransfer = function (code) {
        angular.forEach($scope.Filters.SelectedStopCount, function (e, i) {
            $scope.Filters.SelectedStopCount[i] = false;
            if (i == code) {
                $scope.Filters.SelectedStopCount[i] = true;
            }
            $scope.transferSelected = false;
        });
    }

    //Select All AirPorts 
    $scope.airPortsSelected = true;
    $scope.airPortsToggle = function (s) {
        if (!$scope.airPortsSelected || s) {
            angular.forEach($scope.Filters.ArrivalAirportFilters, function (value, key) {
                $scope.Filters.SelectedAirPorts[value.Code] = true;
            });
            $scope.airPortsSelected = true;
        } else {
            angular.forEach($scope.Filters.ArrivalAirportFilters, function (value, key) {
                $scope.Filters.SelectedAirPorts[value.Code] = false;
            });
            $scope.airPortsSelected = false;
        }
    }

    //Select All AirLines
    $scope.airLinesSelected = true;
    $scope.airLinesToggle = function (s) {
        if (!$scope.airLinesSelected || s) {
            angular.forEach($scope.Filters.AirlineFilters, function (value, key) {
                $scope.Filters.SelectedAirLines[value.Code] = true;
            });
            $scope.airLinesSelected = true;
        } else {
            angular.forEach($scope.Filters.AirlineFilters, function (value, key) {
                $scope.Filters.SelectedAirLines[value.Code] = false;
            });
            $scope.airLinesSelected = false;
        }
    }

    //Select All TransferCount
    $scope.transferSelected = true;
    $scope.transferToggle = function (s) {
        if (!$scope.transferSelected || s) {
            angular.forEach($scope.Filters.TransferCountList, function (e, i) {
                $scope.Filters.SelectedStopCount[e] = true;
            })
            $scope.transferSelected = true;
        } else {
            angular.forEach($scope.Filters.TransferCountList, function (e, i) {
                $scope.Filters.SelectedStopCount[e] = false;
            })
            $scope.transferSelected = false;
        }
        $scope.safeApply();
    }

    //Contiune
    $scope.allocateBtn = function () {
        //Test
        if (HepStorage.isSet('test') && HepStorage.get('test') == '1') {
            var url = 'http://localhost:51683/ucuslar#/?meta=true&ChannelKey=e6990496-c31f-4614-8aef-a82521d21ff3&sessionId=' + $scope.Data.SessionId + '&sessionToken=' + $scope.Data.SessionToken;
            if ($scope.DefaultSearchData.fromCountry != 'TR' || $scope.DefaultSearchData.toCountry != 'TR') {
                url += '&productId=' + $scope.TicketDetail[0].ProductId + '&subOption=' + $scope.TicketDetail[0].FlightId;
                if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                    url += '&subOption=' + $scope.TicketDetail[1].FlightId + '&returnAirlineCode=' + $scope.TicketDetail[1].SegmentList[0].MarketingAirline;
                    url += '&returnPrice=' + $scope.TicketDetail[1].TotalFee;
                }
            } else {
                url += '&productId=' + $scope.TicketDetail[0].FlightId;
                if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                    url += '&productId=' + $scope.TicketDetail[1].FlightId + '&returnAirlineCode=' + $scope.TicketDetail[1].SegmentList[0].MarketingAirline;
                    url += '&returnPrice=' + $scope.TicketDetail[1].TotalFee;
                }
            }
            url += '&personCount=' + $scope.TotalPassengerWithOutInf + '&cls=' + $scope.Variables.classType[$scope.DefaultSearchData.cls] + '&flightType=' + $scope.DefaultSearchData.flightType + '&goingAirlineCode=' + $scope.TicketDetail[0].SegmentList[0].MarketingAirline + '&goingPrice=' + $scope.TicketDetail[0].TotalFee;
            url += '&from=' + $scope.DefaultSearchData.from + '&fromCountry=' + $scope.DefaultSearchData.fromCountry + '&to=' + $scope.DefaultSearchData.to + '&toCountry=' + $scope.DefaultSearchData.toCountry;
            console.log(url);
            var win = window.open(url, '_blank');
            win.focus();
            return false;
        }
        //Test End 
        try {
            HepStorage.set('ticketDetail', $scope.TicketDetail);
        }
        catch (err) {
            //console.log(err);
        }
        $.Popup.open({ type: 'loading', message: $filter('translate')('ALLOCATE_MSG') });

        console.log($scope.TicketDetail);
        $timeout(function () {
            $scope.allocateRequest = {};
            $scope.allocateRequest.airbookings = [];
            $scope.allocateRequest.airbookings[0] = $scope.TicketDetail[0];
            $scope.allocateRequest.airbookings[0].FlightType = $scope.Variables.FlightType.OneWay;
            if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                $scope.allocateRequest.airbookings[1] = $scope.TicketDetail[1];
                $scope.allocateRequest.airbookings[1].FlightType = $scope.Variables.FlightType.Return;
            }

            //StopTime Set
            angular.forEach($scope.allocateRequest.airbookings, function (value, key) {
                angular.forEach($scope.allocateRequest.airbookings[key].SegmentList, function (sValue, sKey) {
                    if (sKey > 0) {
                        var prevKey = sKey - 1;
                        var diffirence = new Date($scope.allocateRequest.airbookings[key].SegmentList[sKey].DepartureDate.substr(0, 10) + 'T' + $scope.allocateRequest.airbookings[key].SegmentList[sKey].DepartureTime + ':00') - new Date($scope.allocateRequest.airbookings[key].SegmentList[prevKey].ArrivalDate.substr(0, 10) + 'T' + $scope.allocateRequest.airbookings[key].SegmentList[prevKey].ArrivalTime + ':00');

                        var milliseconds = parseInt((diffirence % 1000) / 100);
                        var minutes = parseInt((diffirence / (1000 * 60)) % 60);
                        var hours = parseInt((diffirence / (1000 * 60 * 60)) % 24);
                        $scope.allocateRequest.airbookings[key].SegmentList[sKey].StopTime = { hour: hours, minute: minutes };
                    }
                });
            });

            $scope.allocateRequest.SessionId = $scope.Data.SessionId;
            $scope.allocateRequest.SessionToken = $scope.Data.SessionToken;
            $scope.allocateRequest.ServiceFee = {};
            $scope.allocateRequest.ServiceFee.IsDomestic = $scope.isDomestic;
            $scope.allocateRequest.FromCountry = $scope.DefaultSearchData.fromCountry;
            $scope.allocateRequest.ToCountry = $scope.DefaultSearchData.toCountry;
            $scope.allocateRequest.PersonCount = $scope.TotalPassengerWithOutInf;
            $scope.allocateRequest.ServiceFee.GoingFlight = {
                AirlineCode: $scope.TicketDetail[0].SegmentList[0].OperatingAirline,
                ClassType: $scope.TicketDetail[0].ClassType,
                Price: $scope.IsCombine ?  ($scope.TicketDetail[0].TotalFee / 2) / $scope.TotalPassengerWithOutInf : $scope.TicketDetail[0].TotalFee / $scope.TotalPassengerWithOutInf
            }
            $scope.allocateRequest.ClassType = $scope.DefaultSearchData.cls;
            if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                $scope.allocateRequest.ServiceFee.ReturnFlight = {
                    AirlineCode: $scope.TicketDetail[1].SegmentList[0].OperatingAirline,
                    ClassType: $scope.TicketDetail[1].ClassType,
                    Price: $scope.IsCombine ? ($scope.TicketDetail[1].TotalFee / 2) / $scope.TotalPassengerWithOutInf : $scope.TicketDetail[1].TotalFee / $scope.TotalPassengerWithOutInf
                }
            }

            $scope.allocateRequest.Form = {};
            $scope.allocateRequest.Form.SelectedItems = [];
            var item = {};

            var isLocalCompany = false;
            var count = 0;
            angular.forEach($scope.TicketDetail, function (value, key) {
                count = _.filter(value.SegmentList, { IsLocalCompany: true }).length;
                if (!isLocalCompany && count > 0) {
                    isLocalCompany = true;
                }
            });

            var isAtlas = $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay && (($scope.TicketDetail[0].SegmentList.length == 1 && $scope.TicketDetail[0].SegmentList[0].MarketingAirline == 'KK') || ($scope.TicketDetail[0].SegmentList.length == 2 && ($scope.TicketDetail[0].SegmentList[0].MarketingAirline == 'KK' || $scope.TicketDetail[0].SegmentList[1].MarketingAirline == 'KK')));

            if ((!$scope.isDomestic && !isLocalCompany) || $scope.TicketDetail[0].IsInternationalSearch) {
                item = {
                    ProductId: $scope.TicketDetail[0].ProductId
                };
                item.SubOptions = [];
                angular.forEach($scope.TicketDetail, function (value, key) {
                    item.SubOptions.push(value.FlightId);
                });
                $scope.allocateRequest.Form.SelectedItems.push(item);
            } else {
                angular.forEach($scope.TicketDetail, function (value, key) {
                    $scope.allocateRequest.Form.SelectedItems.push({ ProductId: value.FlightId });
                });
            }
            $scope.allocateRequest.ServiceFee.Code = $scope.TicketDetail.RedeemCode;
            $scope.allocateFunction($scope.allocateRequest);
        }, 250);

    };

    angular.element('#allocateBtn').click(function () {
        $scope.allocateBtn();
    });
    //Watch SearchData
    $scope.$watch("Filters", function (newVal, oldVal) {
        if (JSON.stringify(newVal) != JSON.stringify(oldVal)) {
            $timeout.cancel($scope.filterTime);
            $scope.filterTime = $timeout(function () {
                $scope.searchFilter();
            }, 100);
        }
    }, true);
    $scope.$watch("loaded", function (newVal, oldVal) {
        if ($scope.loaded) {
            $timeout(function () {
                angular.element('.detail_close').click(function () { angular.element('.ticketDetail').hide(); });
                //Criteo
                var width = angular.element(window).width();
                if ($scope.Variables.isMobile) {
                    if (width >= 550) {
                        $scope.Criteo.Type = 't';
                    } else {
                        $scope.Criteo.Type = 'm';
                    }
                } else {
                    $scope.Criteo.Type = 'd';
                }
                $scope.Criteo.CheckinDate = $scope.DefaultSearchData.fromDate.split("-").reverse().join("-");
                $scope.Criteo.CheckoutDate = $scope.DefaultSearchData.toDate.split("-").reverse().join("-");
                $scope.Criteo.Product = $scope.DefaultSearchData.fromCity + "-" + $scope.DefaultSearchData.toCity;

                //window.criteo_q = window.criteo_q || [];
                //window.criteo_q.push(
                //    { event: "setAccount", account: 33211 },
                //    { event: "setSiteType", type: $scope.Criteo.Type },
                //    { event: "viewSearch", checkin_date: $scope.Criteo.CheckinDate, checkout_date: $scope.Criteo.CheckoutDate },
                //    { event: "setEmail", email: "" },
                //    { event: "viewItem", item: $scope.Criteo.Product }
                //);
                if (domain.siteKey == 1) {
                    fbq('track', 'Search');
                    RSdataLayer.push({ 'pageType': 'search' });
                    RSdataLayer.push({ 'from': $scope.DefaultSearchData.fromCity });
                    RSdataLayer.push({ 'to': $scope.DefaultSearchData.toCity });
                    RSdataLayer.push({ 'flightType': $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay ? 'One-Way' : 'Round-Trip' });
                    RSdataLayer.push({ 'startDate': $scope.replaceAll($scope.DefaultSearchData.fromDate, '-', '') });
                    if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
                        RSdataLayer.push({ 'endDate': $scope.replaceAll($scope.DefaultSearchData.toDate, '-', '') });
                    }
                    RSdataLayer.push({ 'passengerType': 'Yetişkin' });
                    RSdataLayer.push({ 'totalPassenger': $scope.TotalPassengerWithOutInf });
                    RSdataLayer.push({ 'class': $scope.DefaultSearchData.cls });
                    RSdataLayer.push({ 'event': 'virtualPageView' });
                }
                $scope.safeApply();
            }, 250);
        }
    });
    $scope.safeApply();

    $scope.$watch("TicketDetail", function (newVal, oldVal) {
        console.info($scope.TicketDetail);
    });
});

//Tickets Detail Controller
searchApp.controller('TicketsController', function ($scope, Variables, $http, $location, $locale, $filter, _) {
    if ($scope.allocateResponse == null || $.isEmptyObject($scope.allocateResponse)) {
        if ($scope.checkData('allocate')) {
            if (!HepStorage.isSet('searchResponse')) {
                location.hash = '#/';
                return false;
            }
            $scope.allocateResponse = HepStorage.get('allocateResponse');
            $scope.TicketDetail = HepStorage.get('ticketDetail');
            $scope.renderSearchData(HepStorage.get('searchResponse'));
        } else {
            location.hash = '#/';
            return false;
        }
    } else {
        if ($scope.TicketDetail.realLength() < 1) {
            $scope.TicketDetail = HepStorage.get('ticketDetail');
        }
    }
    if ($scope.allocateResponse.Insurance != null && $scope.allocateResponse.Insurance != null) {
        $scope.insuranceShow = true;
    }
    $scope.TicketDetail = HepStorage.get('ticketDetail');
    $scope.Variables = Variables;
    $scope.stepLineToggle(true);
    $scope.showHeaderToggle(false);
    $scope.showSearchBoxToggle(false);
    $scope.goBackToggle(true, '/');
    $('.step-line .line').animate({
        width: '33%'
    }, 1500, function () {
        $('.step-line .circle:nth-child(2)').addClass('active');
        $('.step-line .circle:nth-child(3), .step-line .circle:nth-child(4)').removeClass('active');
        if ($scope.Variables.isMobile) {
            angular.element('.pax-title').click(function () {
                angular.element(this).find('.right-arrow').toggleClass('active');
                angular.element(this).parent('.twelve').find('.form-group').slideToggle();
            });
        }
    });
    angular.element('.float-nav').hide();

    $scope.BaseFeeTotal = 0;
    $scope.TaxFeeTotal = 0;
    $scope.PriceOfPassenger = 0;
    $scope.BaseFeeOfPassenger = 0;
    $scope.TaxFeeOfPassenger = 0;
    $scope.TicketTotal = 0;
    angular.forEach($scope.TicketDetail, function (value, key) {
        $scope.TicketTotal += value.BaseFee + value.TaxFee;
        $scope.BaseFeeTotal += value.BaseFee;
        $scope.TaxFeeTotal += value.TaxFee;
        var firstTime = new Date(value.SegmentList[0].DepartureDate.substr(0, 10) + 'T' + value.SegmentList[0].DepartureTime.substr(0, 5) + ':00') - 7200000;
        $scope.TicketDetail[key].onAirPortTime = new Date(firstTime).toLocaleDateString() + ' ' + $scope.Variables.nameOfDays[new Date(firstTime).getDay()] + ' ' + new Date(firstTime).toLocaleTimeString().substr(0, 5);
        
        //Baggage
        $scope.TicketDetail[key].BaggageNote = $scope.TicketDetail[key].BaggageWeight.substr(0, 1) == '0' || $scope.TicketDetail[key].BaggageWeight == 'El Bagajı' ? true : false;
        $scope.TicketDetail[key].BaggageWeight = $scope.TicketDetail[key].BaggageWeight.substr(0, 1) == '0' || $scope.TicketDetail[key].BaggageWeight == 'El Bagajı' ? 'El Bagajı' : $scope.TicketDetail[key].BaggageWeight;

       //StopTime Set
        angular.forEach($scope.TicketDetail[key].SegmentList, function (sValue, sKey) {
            $scope.TicketDetail[key].StopTimeNote = false;
            if (sKey > 0) {
                var prevKey = sKey - 1;
                var diffirence = new Date($scope.TicketDetail[key].SegmentList[sKey].DepartureDate.substr(0, 10) + 'T' + $scope.TicketDetail[key].SegmentList[sKey].DepartureTime + ':00') - new Date($scope.TicketDetail[key].SegmentList[prevKey].ArrivalDate.substr(0, 10) + 'T' + $scope.TicketDetail[key].SegmentList[prevKey].ArrivalTime + ':00');

                var milliseconds = parseInt((diffirence % 1000) / 100)
                , minutes = parseInt((diffirence / (1000 * 60)) % 60)
                , hours = parseInt((diffirence / (1000 * 60 * 60)) % 24);

                $scope.TicketDetail[key].SegmentList[sKey].StopTime = { hour: hours, minute: minutes };
                $scope.TicketDetail[key].StopTimeNote = hours >= 12 ? true : false;
            }
        });

        angular.forEach(value.SegmentList, function (s, ii) {
            if (typeof value.SegmentList[ii + 1] != 'undefined') {
                if (s.ArrivalAirport != value.SegmentList[ii + 1].DepartureAirport) {
                    $scope.TicketDetail[key].transferNotes = true;
                }
            }
        });
    });
    HepStorage.set('ticketDetail', $scope.TicketDetail);

    if ($scope.isLogin) {
        $scope.getPassengerList();
    } else {
        if (!HepStorage.isSet('PassengerRecords')) {
            $scope.PassengerRecords = [];
        } else {
            $scope.PassengerRecords = HepStorage.get('PassengerRecords');
            angular.forEach($scope.PassengerRecords, function (item, i) {
                if (typeof $scope.PassengerRecords[i].BirthDate != 'undefined') {
                    $scope.PassengerRecords[i].Birthdate = $scope.PassengerRecords[i].BirthDate;
                    delete $scope.PassengerRecords[i].BirthDate;
                }
            });
        }
    }

    //Price Total
    $scope.allocateResponse.TicketTotalWithServiceFee = 0;
    angular.forEach($scope.allocateResponse.PriceDetails, function (price, i) {
        $scope.allocateResponse.TicketTotalWithServiceFee += (price.BaseFee + price.TaxFee + price.ServiceFee);
    });

    //Passengers Detail
    $scope.PassengersRule = {};
    $scope.fligthDateflip = $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay ? $scope.DefaultSearchData.fromDate.split("-") : $scope.DefaultSearchData.toDate.split("-");
    $scope.fligthDate = new Date($scope.fligthDateflip[2], $scope.fligthDateflip[1], $scope.fligthDateflip[0]);
    angular.forEach($scope.fligthDateflip, function (e, i) {
        $scope.fligthDateflip[i] = parseInt(e);
    });
    var millisecondsPerDay = 1000 * 60 * 60 * 24;
    var originYear = 1970;
    var Year = 365 * millisecondsPerDay;
    var difference = Math.floor(($scope.fligthDate.getTime() - (Year * 12)) / millisecondsPerDay);
    var diffYear = Math.floor(difference / 365);
    var passengerKey = 0;

    //ADULT
    if ($scope.DefaultSearchData.adt > 0) {
        for (var i = 0; i < $scope.DefaultSearchData.adt; i++) {
            $scope.PassengersRule[i] = {};
            $scope.PassengersRule[i].maxYear = Math.floor(difference / 365) + originYear;
            $scope.PassengersRule[i].minYear = Math.floor((($scope.fligthDate.getTime() - (85 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].maxMonth = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? $scope.fligthDateflip[1] - 1 : $scope.fligthDateflip[1];
            $scope.PassengersRule[i].maxDay = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? daysOfMonths[$scope.PassengersRule[i].maxMonth - 1] : $scope.fligthDateflip[0] - 1;
            $scope.PassengersRule[i].defaultDayRange = { min: 1, max: 31 };
            $scope.PassengersRule[i].defaultMonthRange = { min: 1, max: 12 };
            $scope.PassengersRule[i].defaultYearRange = { min: $scope.PassengersRule[i].minYear, max: $scope.PassengersRule[i].maxYear };
            $scope.Passengers[i] = {};
            $scope.Passengers[i].Type = 'ADT';
            $scope.Passengers[i].Name = 'Yetişkin';
            $scope.Passengers[i].Gender = 'M';
        }
        passengerKey = $scope.DefaultSearchData.adt;
    }
    //OLD
    if ($scope.DefaultSearchData.src > 0) {
        for (var a = 0; a < $scope.DefaultSearchData.src; a++) {
            i = passengerKey + a;
            $scope.PassengersRule[i] = {};
            $scope.PassengersRule[i].maxYear = Math.floor((($scope.fligthDate.getTime() - (65 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].minYear = 1900;
            $scope.PassengersRule[i].maxMonth = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? $scope.fligthDateflip[1] - 1 : $scope.fligthDateflip[1];
            $scope.PassengersRule[i].maxDay = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? daysOfMonths[$scope.PassengersRule[i].maxMonth - 1] - $scope.fligthDateflip[0] : daysOfMonths[$scope.PassengersRule[i].maxMonth] - $scope.fligthDateflip[0];
            $scope.PassengersRule[i].defaultDayRange = { min: 1, max: 31 };
            $scope.PassengersRule[i].defaultMonthRange = { min: 1, max: 12 };
            $scope.PassengersRule[i].defaultYearRange = { min: $scope.PassengersRule[i].minYear, max: $scope.PassengersRule[i].maxYear };
            $scope.Passengers[i] = {};
            $scope.Passengers[i].Type = 'SRC';
            $scope.Passengers[i].Name = '65 Yaşüstü';
            $scope.Passengers[i].Gender = 'M';
        }
        passengerKey = passengerKey + $scope.DefaultSearchData.src;
    }
    //STUDENT
    if ($scope.DefaultSearchData.std > 0) {
        for (var a = 0; a < $scope.DefaultSearchData.std; a++) {
            i = passengerKey + a;
            $scope.PassengersRule[i] = {};
            $scope.PassengersRule[i].maxYear = Math.floor((($scope.fligthDate.getTime() - (12 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].minYear = Math.floor((($scope.fligthDate.getTime() - (24 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].maxMonth = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? $scope.fligthDateflip[1] - 1 : $scope.fligthDateflip[1];
            $scope.PassengersRule[i].maxDay = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? daysOfMonths[$scope.PassengersRule[i].maxMonth - 1] - $scope.fligthDateflip[0] : daysOfMonths[$scope.PassengersRule[i].maxMonth] - $scope.fligthDateflip[0];
            $scope.PassengersRule[i].defaultDayRange = { min: 1, max: 31 };
            $scope.PassengersRule[i].defaultMonthRange = { min: 1, max: 12 };
            $scope.PassengersRule[i].defaultYearRange = { min: $scope.PassengersRule[i].minYear, max: $scope.PassengersRule[i].maxYear };
            $scope.Passengers[i] = {};
            $scope.Passengers[i].Type = 'STD';
            $scope.Passengers[i].Name = 'Öğrenci';
            $scope.Passengers[i].Gender = 'M';
        }
        passengerKey = passengerKey + $scope.DefaultSearchData.std;
    }
    //CHİLD
    if ($scope.DefaultSearchData.chd > 0) {
        for (var  a = 0; a < $scope.DefaultSearchData.chd; a++) {
            i = passengerKey + a;
            $scope.PassengersRule[i] = {};
            $scope.PassengersRule[i].maxYear = Math.floor((($scope.fligthDate.getTime() - (2 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].minYear = Math.floor((($scope.fligthDate.getTime() - (12 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].maxMonth = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? $scope.fligthDateflip[1] - 1 : $scope.fligthDateflip[1];
            $scope.PassengersRule[i].maxDay = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? daysOfMonths[$scope.PassengersRule[i].maxMonth - 1] - $scope.fligthDateflip[0] : daysOfMonths[$scope.PassengersRule[i].maxMonth] - $scope.fligthDateflip[0];
            $scope.PassengersRule[i].defaultDayRange = { min: 1, max: 31 };
            $scope.PassengersRule[i].defaultMonthRange = { min: 1, max: 12 };
            $scope.PassengersRule[i].defaultYearRange = { min: $scope.PassengersRule[i].minYear, max: $scope.PassengersRule[i].maxYear };
            $scope.Passengers[i] = {};
            $scope.Passengers[i].Type = 'CHD';
            $scope.Passengers[i].Name = 'Çocuk';
            $scope.Passengers[i].Gender = 'M';
        }
        passengerKey = passengerKey + $scope.DefaultSearchData.chd;
    }
    //BABY
    if ($scope.DefaultSearchData.inf > 0) {
        for (var a = 0; a < $scope.DefaultSearchData.inf; a++) {
            i = passengerKey + a;
            $scope.PassengersRule[i] = {};
            $scope.PassengersRule[i].maxYear = Math.floor((($scope.fligthDate.getTime() - (0 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].minYear = Math.floor((($scope.fligthDate.getTime() - (2 * Year)) / millisecondsPerDay) / 365) + originYear;
            $scope.PassengersRule[i].maxMonth = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? $scope.fligthDateflip[1] - 1 : $scope.fligthDateflip[1];
            $scope.PassengersRule[i].maxDay = (daysOfMonths[$scope.fligthDateflip[1]] - $scope.fligthDateflip[0]) <= 0 ? daysOfMonths[$scope.PassengersRule[i].maxMonth - 1] - $scope.fligthDateflip[0] : daysOfMonths[$scope.PassengersRule[i].maxMonth] - $scope.fligthDateflip[0];
            $scope.PassengersRule[i].defaultDayRange = { min: 1, max: 31 };
            $scope.PassengersRule[i].defaultMonthRange = { min: 1, max: 12 };
            $scope.PassengersRule[i].defaultYearRange = { min: $scope.PassengersRule[i].minYear, max: $scope.PassengersRule[i].maxYear };
            $scope.Passengers[i] = {};
            $scope.Passengers[i].Type = 'INF';
            $scope.Passengers[i].Name = 'Bebek';
            $scope.Passengers[i].Gender = 'M';
            $scope.Passengers[i].Price = 0;
        }
    }
    $scope.Passengers[0].AreaCode = "+90";
    $scope.Passengers[0].isEmail = false;

    $scope.$watch("Passengers", function (newVal, oldVal) {
        angular.forEach(newVal, function (val, key) {
            //if (val.birthYear == $scope.PassengersRule[key].maxYear) {
            //    $scope.PassengersRule[key].defaultMonthRange.max = $scope.PassengersRule[key].maxMonth;
            //    $scope.PassengersRule[key].defaultMonthRange.min = 1;
            //    if (val.birthMonth == $scope.PassengersRule[key].maxMonth) {
            //        $scope.PassengersRule[key].defaultDayRange.max = $scope.PassengersRule[key].maxDay;
            //        $scope.PassengersRule[key].defaultDayRange.min = 1;
            //    } else {
            //        $scope.PassengersRule[key].defaultDayRange.max = typeof val.birthMonth == 'undefined' ? 31 : val.birthMonth == 2 && (val.birthYear % 4) == 0 ? 29 : daysOfMonths[val.birthMonth];
            //    }
            //    //if (JSON.stringify(val) != JSON.stringify(oldVal[key])) {
            //    //    $.Notification.open({ message: $scope.Variables.maxAgeMessage[$scope.Passengers[key].Type] });
            //    //}
            //} else if (val.birthYear == $scope.PassengersRule[key].minYear) {
            //    $scope.PassengersRule[key].defaultMonthRange.min = 14 - $scope.PassengersRule[key].maxMonth;
            //    $scope.PassengersRule[key].defaultMonthRange.max = 12;
            //    if (val.birthMonth == $scope.PassengersRule[key].defaultMonthRange.min) {
            //        $scope.PassengersRule[key].defaultDayRange.min = ($scope.fligthDateflip[0] + 1) >= daysOfMonths[val.birthMonth] ? 1 : $scope.fligthDateflip[0] + 1;
            //        $scope.PassengersRule[key].defaultDayRange.max = daysOfMonths[val.birthMonth];
            //    } else {
            //        $scope.PassengersRule[key].defaultDayRange.min = 1;
            //        $scope.PassengersRule[key].defaultDayRange.max = typeof val.birthMonth == 'undefined' ? 31 : val.birthMonth == 2 && (val.birthYear % 4) == 0 ? 29 : daysOfMonths[val.birthMonth];
            //    }
            //    //if (JSON.stringify(val) != JSON.stringify(oldVal[key])) {
            //    //    $.Notification.open({ message: $scope.Variables.maxAgeMessage[$scope.Passengers[key].Type]});
            //    //}
            //} else {
            //    $scope.PassengersRule[key].defaultMonthRange.min = 1;
            //    $scope.PassengersRule[key].defaultMonthRange.max = 12;
            //    $scope.PassengersRule[key].defaultDayRange.max = typeof val.birthMonth == 'undefined' ? 31 : val.birthMonth == 2 && (val.birthYear % 4) == 0 ? 29 : daysOfMonths[val.birthMonth];
            //    $scope.PassengersRule[key].defaultDayRange.min = 1;
            //}

            val.sbirthMonth = typeof val.birthMonth != 'undefined' && val.birthMonth.length == 1 ? "0" + val.birthMonth : val.birthMonth;
            val.sbirthDay = typeof val.birthDay != 'undefined' && val.birthDay.length == 1 ? "0" + val.birthDay : val.birthDay;
            $scope.Passengers[key].Birthdate = val.birthYear + '-' + val.sbirthMonth + '-' + val.sbirthDay;

            //Todo: Kontrol Et
            if (!val.isTC && oldVal[key].isTC && !validateTCKN(val.CitizenNo) && typeof val.CitizenNo != 'undefined') {
                $scope.Passengers[key].CitizenNo = "";
            }
            if (val.isTC | !$scope.isDomestic) {
                $scope.Passengers[key].CitizenNo = "11111111110";
            }
            $scope.Passengers[key].PassportNo = '1111111111';
            $scope.Passengers[key].Sequence = key + 1;
        });
    }, true);
    $scope.Passengers[0].PhoneNumber = 5;
    $scope.PassengersRule.length = Object.keys($scope.PassengersRule).length;

    if ($scope.isLogin) {
        $scope.Passengers[0].Email = $scope.User.Email;
        if ($scope.User.Phone != "" && $scope.User.Phone != null && $scope.User.Phone.indexOf("-") >= 0) {
            $scope.Passengers[0].AreaCode = $scope.User.Phone.split('-')[0];
            $scope.Passengers[0].PhoneNumber = $scope.User.Phone.split('-')[1];
        }
        if ($scope.User.IsEmail && $scope.User.IsSms) {
            $scope.Passengers[0].isEmail = true;
        }
    }

    $scope.setPassenger = function (n, item) {
        if (n == 0 && $scope.isLogin) {
            item.Email = $scope.Passengers[0].Email;
            item.AreaCode = $scope.Passengers[0].AreaCode;
            item.PhoneNumber = $scope.Passengers[0].PhoneNumber;
            item.isEmail = $scope.Passengers[0].isEmail;
        }
        angular.copy(item, $scope.Passengers[n]);
        $scope.Passengers[n].isTC = item.isTC;
        $scope.Passengers[n].CitizenNo = item.CitizenNo;
        $scope.safeApply();
    }

    $scope.PassengerRecordsShow = $scope.PassengerRecords;

    angular.element('#Email').keyup(function () {
        if (!$scope.isLogin) {
            email = angular.element(this).val();
            $scope.PassengerRecordsShow = _.filter($scope.PassengerRecords, function (item, index) {
                return item.IfContact && item.Email.indexOf(email) >= 0;
            });
            if (email == '') {
                $scope.PassengerRecordsShow = _.filter($scope.PassengerRecords, function (item, index) {
                    return item.IfContact == true;
                });
            }
        }
    });

    //Insurance
    $scope.useInsuranceFunction = function () {
        if ($scope.allocateResponse.Insurance.Status) {
            $scope.allocateResponse.Insurance.Status = false;
            $scope.allocateResponse.TicketTotalWithServiceFee = $scope.allocateResponse.TicketTotalWithServiceFee - $scope.allocateResponse.Insurance.Price;
        } else {
            $scope.allocateResponse.Insurance.Status = true;
            $scope.allocateResponse.TicketTotalWithServiceFee = $scope.allocateResponse.TicketTotalWithServiceFee + $scope.allocateResponse.Insurance.Price;
        }
        HepStorage.set('allocateResponse', $scope.allocateResponse);
    };

    //Contiune
    $scope.contiune = function (IsReservation) {
        $('[tooltip]').removeClass('active');
        IsReservation = IsReservation && $scope.allocateResponse.CanBeReserved ? true : false;
        if (!$scope.PassengersForm.$valid) {
            var first = true;
            $('form[name=PassengersForm]').find('input, select').each(function (i, e) {
                if ($(e).attr('class').indexOf('ng-invalid')) {
                    if (first) {
                        var error = _.filter($scope.PassengersForm, { '$invalid': true });
                        $scope.PassengersForm[error[0].$name].$touched = true;
                        first = false;
                    }
                    $(e).addClass('ng-touched');
                }
            });
            return false;
        }
        $.Popup.open({ type: 'loading', message: (IsReservation ?  $filter('translate')('RESERVATION_LOADING_MSG') : $filter('translate')('PRERESERVATION_LOADING_MSG'))});
        HepStorage.set('passengers', $scope.Passengers);
        $scope.Passengers[0].IfContact = true;
        $scope.updatePassengerRequest = {};
        $scope.updatePassengerRequest.Form = {};
        $scope.updatePassengerRequest.IsReservation = IsReservation;
        $scope.updatePassengerRequest.Form.NewPassengers = $scope.Passengers;
        $scope.updatePassengerRequest.Form.NewPassengers[0].Phone = $scope.updatePassengerRequest.Form.NewPassengers[0].AreaCode + '-' + $scope.updatePassengerRequest.Form.NewPassengers[0].PhoneNumber;
        $scope.updatePassengerRequest.SessionId = $scope.Data.SessionId;
        $scope.updatePassengerRequest.SessionToken = $scope.Data.SessionToken;

        //Passenger To Local
        if (!$scope.isLogin) {
            $scope.LocalPassengers = angular.copy($scope.PassengerRecords);
            angular.forEach($scope.Passengers, function (e, i) {
                if (e.CitizenNo != '11111111110' && _.filter($scope.LocalPassengers, { CitizenNo: e.CitizenNo }).length == 0) {
                    e.isTC = false;
                    $scope.LocalPassengers.push(e);
                } else if (e.CitizenNo == '11111111110' && _.filter($scope.LocalPassengers, { FirstName: e.FirstName, LastName: e.LastName }).length == 0) {
                    e.isTC = true;
                    $scope.LocalPassengers.push(e);
                } else if (_.filter($scope.LocalPassengers, { FirstName: e.FirstName, LastName: e.LastName }).length == 1) {
                    $scope.LocalPassengers[_.findLastIndex($scope.LocalPassengers, { FirstName: e.FirstName, LastName: e.LastName })] = e;
                }
            });
            HepStorage.set('PassengerRecords', $scope.LocalPassengers);
        }

        if ($scope.allocateResponse.Insurance != null && $scope.allocateResponse.Insurance.Status != null && !$scope.allocateResponse.Insurance.Status && !IsReservation) {
            var insuranceMessage = $scope.isDomestic ? $filter('translate')('INSURANCEMSG_DOMESTIC') : $filter('translate')('INSURANCEMSG_INTERNATIONAL');
            insuranceMessage = insuranceMessage.replace('{insurancePrice}', (($scope.allocateResponse.Insurance.Price / $scope.TotalPassengerWithOutInf) / $scope.CurrentCurrency.Value).formatMoney(2, ',', '.'));
            insuranceMessage = insuranceMessage.replace('{Symbol}',  $scope.CurrentCurrency.Symbol);
            $.Popup.open({
                title: $filter('translate')('TRAVEL_INSURANCE'),
                type: 'alert',
                message: '<font style="size:15px;"><br/><img src="/assets/images/Insurance.png" style="height: 70px;float: left; margin: -10px 20px 0 0;">' + insuranceMessage,
                buttons: [
                    {
                        Name: $filter('translate')('INSURANCE_USE'),
                        Function: function () {
                            $scope.useInsuranceFunction();
                            $.Popup.close();
                            $scope.updatePassengerFunction($scope.updatePassengerRequest);
                            $.Popup.open({ type: 'loading', message: $filter('translate')('RESERVATION_LOADING_MSG') });
                        }
                    },
                    {
                        Name: $filter('translate')('INSURANCE_CANCEL'),
                        Classes: 'btn-grey',
                        Function: function () {
                            $.Popup.close();
                            $scope.updatePassengerFunction($scope.updatePassengerRequest);
                            $.Popup.open({ type: 'loading', message: $filter('translate')('RESERVATION_LOADING_MSG') });
                        }
                    }
                ]
            });
            return false;
        }
        $scope.updatePassengerFunction($scope.updatePassengerRequest);
    };

    //Redeem Allocate
    $scope.redeemAllocate = function () {
        try {
            HepStorage.set('ticketDetail', $scope.TicketDetail);
        }
        catch (err) {
            //console.log(err);
        }
        $.Popup.open({ type: 'loading', message: $filter('translate')('PROMOTION_LOADING_MSG')});
        $scope.allocateRequest = {};
        $scope.allocateRequest.airbookings = [];
        $scope.allocateRequest.airbookings[0] = $scope.TicketDetail[0];
        $scope.allocateRequest.airbookings[0].FlightType = $scope.Variables.FlightType.OneWay;
        if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
            $scope.allocateRequest.airbookings[1] = $scope.TicketDetail[1];
            $scope.allocateRequest.airbookings[1].FlightType = $scope.Variables.FlightType.Return;
        }

        //StopTime Set
        angular.forEach($scope.allocateRequest.airbookings, function (value, key) {
            angular.forEach($scope.allocateRequest.airbookings[key].SegmentList, function (sValue, sKey) {
                if (sKey > 0) {
                    var prevKey = sKey - 1;
                    var diffirence = new Date($scope.allocateRequest.airbookings[key].SegmentList[sKey].DepartureDate.substr(0, 10) + 'T' + $scope.allocateRequest.airbookings[key].SegmentList[sKey].DepartureTime + ':00') - new Date($scope.allocateRequest.airbookings[key].SegmentList[prevKey].ArrivalDate.substr(0, 10) + 'T' + $scope.allocateRequest.airbookings[key].SegmentList[prevKey].ArrivalTime + ':00');

                    var milliseconds = parseInt((diffirence % 1000) / 100)
                    , minutes = parseInt((diffirence / (1000 * 60)) % 60)
                    , hours = parseInt((diffirence / (1000 * 60 * 60)) % 24);
                    $scope.allocateRequest.airbookings[key].SegmentList[sKey].StopTime = { hour: hours, minute: minutes };
                }
            });
        });

        $scope.allocateRequest.SessionId = $scope.Data.SessionId;
        $scope.allocateRequest.SessionToken = $scope.Data.SessionToken;
        $scope.allocateRequest.ServiceFee = {};
        $scope.allocateRequest.ServiceFee.IsDomestic = $scope.isDomestic;
        $scope.allocateRequest.FromCountry = $scope.DefaultSearchData.fromCountry;
        $scope.allocateRequest.ToCountry = $scope.DefaultSearchData.toCountry;
        $scope.allocateRequest.PersonCount = $scope.TotalPassengerWithOutInf;
        $scope.allocateRequest.ClassType = $scope.DefaultSearchData.cls;
        $scope.allocateRequest.ServiceFee.GoingFlight = {
            AirlineCode: $scope.TicketDetail[0].SegmentList[0].OperatingAirline,
            ClassType: $scope.TicketDetail[0].ClassType,
            Price: $scope.TicketDetail[0].TotalFee / $scope.TotalPassengerWithOutInf
        }

        if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
            $scope.allocateRequest.ServiceFee.ReturnFlight = {
                AirlineCode: $scope.TicketDetail[1].SegmentList[0].OperatingAirline,
                ClassType: $scope.TicketDetail[1].ClassType,
                Price: $scope.TicketDetail[1].TotalFee / $scope.TotalPassengerWithOutInf
            }
        }

        $scope.allocateRequest.Form = {};
        $scope.allocateRequest.Form.SelectedItems = [];
        var item = {};

        var isLocalCompany = false;
        var count = 0;
        angular.forEach($scope.TicketDetail, function (value, key) {
            count = _.filter(value.SegmentList, { IsLocalCompany: true }).length;
            if (!isLocalCompany && count > 0) {
                isLocalCompany = true;
            }
        });

        var isAtlas = $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.OneWay && (($scope.TicketDetail[0].SegmentList.length == 1 && $scope.TicketDetail[0].SegmentList[0].MarketingAirline == 'KK') || ($scope.TicketDetail[0].SegmentList.length == 2 && ($scope.TicketDetail[0].SegmentList[0].MarketingAirline == 'KK' || $scope.TicketDetail[0].SegmentList[1].MarketingAirline == 'KK')));

        if ((!$scope.isDomestic && !isLocalCompany)) {
            item = {
                ProductId: $scope.TicketDetail[0].ProductId
            };
            item.SubOptions = [];
            angular.forEach($scope.TicketDetail, function (value, key) {
                item.SubOptions.push(value.FlightId);
            });
            $scope.allocateRequest.Form.SelectedItems.push(item);
        } else {
            angular.forEach($scope.TicketDetail, function (value, key) {
                $scope.allocateRequest.Form.SelectedItems.push({ ProductId: value.FlightId });
            });
        }
        if ($scope.allocateResponse.Promosyon.Status) {
            $scope.allocateRequest.ServiceFee.Code = '';
            $scope.TicketDetail.RedeemCode = '';
        } else {
            $scope.allocateRequest.ServiceFee.Code = $scope.TicketDetail.RedeemCode;
        }
        $scope.allocateFunction($scope.allocateRequest);
    }

    if (domain.siteKey == 1) fbq('track', 'AddToCart');
    if ($scope.Variables.isMobile) {
        $(window).on('popstate', function (e) {
            if ($('.passengers').is(':visible')) {
                setTimeout(function () {
                    angular.element('.passengers').slideUp();
                    angular.element('.main_container.insurance, .main_container.ticket-detail, .main_container.ticket-search, .showPassenger').slideDown();
                }, 1500);
            }
        });
    }

    var back = true;
    $scope.$on('$routeChangeStart', function (scope, next, current) {
        if (next.$$route.route == 'SearchListController' && $scope.metaSearch && back) {
            back = false;
            location.hash = '#/';
            $scope.searchFunction($scope.request);
            scope.preventDefault();
        }
        return false;
    });

    $scope.loaded = true; console.log('loaded : true');
    setTimeout(function () {
        $("[name^='FirstName'],[name=Email]").on('focus', function () {
            var ngComplete = $(this).parent('.form-group').find('.ngcomplete');
            ngComplete.slideDown();
            $(this).on('blur', function () {
                ngComplete.slideUp();
            })
        });
        $('[tooltip].active input').on('focus', function () {
            $(this).parent('[tooltip]').removeClass('active');
        });
    },500)
    $.Popup.close();
    $scope.safeApply();
});

//Payment Controller
searchApp.controller('PaymentController', function ($scope, $http, $location, $timeout, $filter, _) {
    $scope.loaded = false; console.log('loaded : false');
    $scope.goBackToggle(false, 'Home');
    if ($.isEmptyObject($scope.updatePassengerResponse) && $scope.checkData('updatePassenger')) {
        $scope.updatePassengerResponse = HepStorage.get('updatePassenger');
        $scope.allocateResponse = HepStorage.get('allocateResponse');
        $scope.TicketDetail = HepStorage.get('ticketDetail');
        $scope.Passengers = HepStorage.get('passengers');
    } else if ($.isEmptyObject($scope.updatePassengerResponse)) {
        if ($.isEmptyObject($scope.TicketDetail) || $scope.TicketDetail.realLength() < 1) {
            $scope.TicketDetail = HepStorage.get('ticketDetail');
        }
    } else if (!$scope.checkData('updatePassenger')) {
        location.hash = '#/';
        return false;
    }
    if ($scope.checkData('allocate')) {
        $scope.allocateResponse = HepStorage.get('allocateResponse');
    }
    if (HepStorage.isSet('ticketDetail') && HepStorage.get('ticketDetail').realLength() > 0) {
        $scope.TicketDetail = HepStorage.get('ticketDetail');
    }
    if ($scope.Passengers.length == 0) {
        $scope.Passengers = HepStorage.get('passengers');
    }
    $scope.showBillingForm = false;
    $scope.stepLineToggle(true);
    $scope.showHeaderToggle(false);
    $scope.showSearchBoxToggle(false);
    $scope.SelectedBank = true;
    $('.step-line .line').animate({
        width: '66%'
    }, 1500, function () {
        $('.step-line .circle:nth-child(2)').addClass('active');
        $('.step-line .circle:nth-child(3)').addClass('active');
        var moveHeight = $(".baggage_warning").is(':visible') ? $(".baggage_warning").offset().top : $(".payment.credit").offset().top;
        $('html, body').animate({ scrollTop: moveHeight - 92 }, 1000);
        $('html, body').on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", function () {
            $('html, body').stop();
        });
        $('html, body').animate({ scrollTop: moveHeight - 92 }, 'slow', function () {
            $('html, body').off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove");
        });
    });
    angular.element('.step-line-container .step-line .circle:first-child, .step-line-container .texts div:first-child').unbind();
    if (HepStorage.isSet('session')) {
        $scope.Data.SessionId = HepStorage.get('session').SessionId;
        $scope.Data.SessionToken = HepStorage.get('session').SessionToken;
    }
    angular.forEach($scope.Passengers, function (e, i) {
        $scope.Passengers[i].BirthdateShow = $scope.Passengers[i].Birthdate.split('-').reverse().join('-');
    });

    $scope.allocateResponse.TicketTotalWithServiceFee = 0;
    angular.forEach($scope.allocateResponse.PriceDetails, function (price, i) {
        $scope.allocateResponse.TicketTotalWithServiceFee += (price.BaseFee + price.TaxFee + price.ServiceFee);
    });

    angular.forEach($scope.TicketDetail, function (value, key) {
        var firstTime = new Date(value.SegmentList[0].DepartureDate.substr(0, 10) + 'T' + value.SegmentList[0].DepartureTime.substr(0, 5) + ':00') - 7200000;
        $scope.TicketDetail[key].onAirPortTime = new Date(firstTime).toLocaleDateString() + ' ' + $scope.Variables.nameOfDays[new Date(firstTime).getDay()] + ' ' + new Date(firstTime).toLocaleTimeString().substr(0, 5);
        //Baggage
        $scope.TicketDetail[key].BaggageNote = $scope.TicketDetail[key].BaggageWeight.substr(0, 1) == '0' || $scope.TicketDetail[key].BaggageWeight == 'El Bagajı' ? true : false;
        $scope.TicketDetail[key].BaggageWeight = $scope.TicketDetail[key].BaggageWeight.substr(0, 1) == '0' || $scope.TicketDetail[key].BaggageWeight == 'El Bagajı' ? 'El Bagajı' : $scope.TicketDetail[key].BaggageWeight;
        //StopTime Set
        angular.forEach($scope.TicketDetail[key].SegmentList, function (sValue, sKey) {
            $scope.TicketDetail[key].StopTimeNote = false;
            if (sKey > 0) {
                var prevKey = sKey - 1;
                var diffirence = new Date($scope.TicketDetail[key].SegmentList[sKey].DepartureDate.substr(0, 10) + 'T' + $scope.TicketDetail[key].SegmentList[sKey].DepartureTime + ':00') - new Date($scope.TicketDetail[key].SegmentList[prevKey].ArrivalDate.substr(0, 10) + 'T' + $scope.TicketDetail[key].SegmentList[prevKey].ArrivalTime + ':00');

                var milliseconds = parseInt((diffirence % 1000) / 100)
                , minutes = parseInt((diffirence / (1000 * 60)) % 60)
                , hours = parseInt((diffirence / (1000 * 60 * 60)) % 24);

                $scope.TicketDetail[key].SegmentList[sKey].StopTime = { hour: hours, minute: minutes };
                $scope.TicketDetail[key].StopTimeNote = hours >= 12 ? true : false;
            }
        });
        angular.forEach(value.SegmentList, function (s, ii) {
            if (typeof value.SegmentList[ii + 1] != 'undefined') {
                if (s.ArrivalAirport != value.SegmentList[ii + 1].DepartureAirport) {
                    $scope.TicketDetail[key].transferNotes = true;
                }
            }
        });
    });

    if ($scope.allocateResponse.Insurance != null && $scope.allocateResponse.Insurance.Status) {
        $scope.allocateResponse.TicketTotalWithServiceFee = $scope.allocateResponse.TicketTotalWithServiceFee + $scope.allocateResponse.Insurance.Price;
    }

    $scope.Payment.Form = {};
    $scope.Payment.Form.ExpirationMonth = "";
    $scope.Payment.Form.ExpirationnYear = "";
    $scope.Payment.Form.InstallmentOptionId = 0;
    $scope.Payment.Form.isCheckContract = true;
    $scope.Payment.Form.isBilling = false;

    $scope.PaymentRule = {};
    $scope.PaymentRule.Year = { min: new Date().getFullYear(), max: (new Date().getFullYear() + 10) };
    $scope.PaymentRule.Month = { min: 1, max: 12 };
    $scope.BankList = $scope.updatePassengerResponse.BankList;

    var back = false;
    $scope.$on('$routeChangeStart', function (scope, next, current) {
        if ((next.$$route.route == "TicketsController" || next.$$route.route == 'SearchListController') && !back) {
            back = true;
            $.Popup.open({
                type: 'alert',
                message: 'Satın alma işleminden vazgeçmek istediğinizden emin misiniz ?',
                buttons: [
                    {
                        Name: 'Evet',
                        Function: function () {
                            back = true;
                            location.hash = '#/';
                            $.Popup.close();
                            $scope.searchFunction($scope.request);
                        }
                    },
                    {
                        Name: 'İptal',
                        Function: function () {
                            $.Popup.close();

                        }
                    }
                ]
            });
            back = false;
            scope.preventDefault();
        }
        return false;
    });

    //Billing
    $scope.$watch('Payment.Form.isBilling', function (newVal, oldVal) {
        if (newVal) {
            $scope.showBillingForm = $scope.showBillingForm == true ? false : true;
            if (!$scope.showBillingForm) {
                delete $scope.Payment.BillingInfo;
            } else {
                $scope.Payment.BillingInfo = $scope.updatePassengerResponse.BillingInfo;
            }
        }
    }, true);

    //Billing Save
    $scope.billingSave = function (status) {
        if (status) {
            if ($scope.BillingForm.$valid) {
                $scope.showBillingForm = false;
            } else {
                $('form[name=BillingForm]').find('input, select').each(function (i, e) {
                    if ($(e).attr('class').indexOf('ng-invalid')) {
                        $(e).addClass('ng-touched');
                        if ($(e).attr('type') == 'checkbox') {
                            var name = $(e).attr('name');
                            $scope.PaymentForm[name].$touched = true;
                            //$(e).parent('.mcheckbox').parent('.form-group').find('.form-group-error').addClass('ng-touched');
                        }
                        if ($(e).attr('type') == 'radio') {
                            var name = $(e).attr('name');
                            $scope.PaymentForm[name].$touched = true;
                            //$(e).parent('.mradio').parent('.form-group').find('.form-group-error').addClass('ng-touched');
                        }
                    }
                });
                return false;
            }
        } else {
            $scope.showBillingForm = false;
            $scope.Payment.Form.isBilling = false;
            delete $scope.Payment.BillingInfo;
        }
    };

    //Payment
    var paymentBankResponsectrl;
    $scope.GetPayment = function () {
        if (!$scope.PaymentForm.$valid || $scope.PaymentForm.CardNumber.$error.creditcard) {
            $('form[name=PaymentForm]').find('input, select').each(function (i, e) {
                if ($(e).attr('class').indexOf('ng-invalid')) {
                    $(e).addClass('ng-touched');
                    if ($(e).attr('type') == 'checkbox') {
                        var name = $(e).attr('name');
                        $scope.PaymentForm[name].$touched = true;
                        //$(e).parent('.mcheckbox').parent('.form-group').find('.form-group-error').addClass('ng-touched');
                    }
                    if ($(e).attr('type') == 'radio') {
                        var name = $(e).attr('name');
                        $scope.PaymentForm[name].$touched = true;
                        //$(e).parent('.mradio').parent('.form-group').find('.form-group-error').addClass('ng-touched');
                    }
                }
            });
            return false;
        }
        clearInterval(paymentBankResponsectrl);
        $.Popup.open({ type: 'loading', message: $filter('translate')('PAYMENT.LOADING') });
        $scope.Payment.Form.CardType = $scope.Payment.Form.CardNumber.substr(0, 1) == 4 ? "Visa" : "Master";
        $scope.Payment.Form.Amount = $scope.BankList[0].InstallmentOptionList[0].OriginalTotal;
        $scope.paymentRequest = $scope.Payment;
        $scope.paymentRequest.Form.ExpirationYear = $scope.paymentRequest.Form.ExpirationnYear.toString().slice(-2);
        $scope.paymentRequest.SessionId = $scope.Data.SessionId;
        $scope.paymentRequest.SessionToken = $scope.Data.SessionToken;
        $scope.paymentRequest.Form.BillingName = $scope.Passengers[0].FirstName + ' ' + $scope.Passengers[0].LastName;
        $scope.paymentRequest.Form.CardNumber = $scope.paymentRequest.Form.CardNumber.replace(/\D/g, "").toString();
        $scope.paymentRequest.InsuranceProductId = null;
        if ($scope.allocateResponse.Insurance != null && $scope.allocateResponse.Insurance.Status) {
            $scope.paymentRequest.InsuranceProductId = $scope.allocateResponse.Insurance.Id;
        }
        if (typeof $scope.Payment.BillingInfo != 'undefined') {
            HepStorage.set('Billing', $scope.Payment.BillingInfo);
        }
        $scope.paymentFunction($scope.paymentRequest);

        delete window.paymentBankResponse;
        var goFinalize = false;
        paymentBankResponsectrl = setInterval(function () {
            if (typeof window.paymentBankResponse != 'undefined') {
                clearInterval(paymentBankResponsectrl);
                if (window.paymentBankResponse.status && goFinalize == false) {
                    goFinalize = true;
                    $.Popup.open({ type: 'loading', message: $filter('translate')('PAYMENT.WAITING_BOOKING')});
                    $scope.finalizeShoppingRequest['sessionId'] = $scope.Data.SessionId;
                    $scope.finalizeShoppingRequest['DiscountId'] = $scope.allocateResponse.DiscountId;
                    $scope.finalizeShoppingRequest['isReservation'] = $scope.IsReservation;
                    $scope.finalizeShoppingFunction($scope.finalizeShoppingRequest);
                } else {
                    $.Popup.close();
                    $.Popup.open({
                        type: 'alert',
                        message: window.paymentBankResponse.message,
                        buttons: [
                            {
                                Name: 'Tamam',
                                Function: function () {
                                    $.Popup.close();
                                }
                            }
                        ]
                    });
                }
            }
        }, 1000);
    }

    $scope.setSelectionRange = function (input, selectionStart, selectionEnd) {
        if (input.setSelectionRange) {
            input.focus();
            input.setSelectionRange(selectionStart, selectionEnd);
        }
        else if (input.createTextRange) {
            var range = input.createTextRange();
            range.collapse(true);
            range.moveEnd('character', selectionEnd);
            range.moveStart('character', selectionStart);
            range.select();
        }
    }

    //Credit Card Validation
    $scope.validCreditCard = function valid_credit_card(value) {
        if (/[^0-9-\s]+/.test(value)) return false;
        var nCheck = 0, nDigit = 0, bEven = false;
        value = value.replace(/\D/g, "");
        for (var n = value.length - 1; n >= 0; n--) {
            var cDigit = value.charAt(n),
            nDigit = parseInt(cDigit, 10);
            if (bEven) {
                if ((nDigit *= 2) > 9) nDigit -= 9;
            }
            nCheck += nDigit;
            bEven = !bEven;
        }
        return (nCheck % 10) == 0;
    }

    //Credit Card Check & Bank Bin
    var bankBinTime;
    angular.element('input[name=CardNumber]').keyup(function () {
        var ccInput = this;
        var newVal = ccInput.value;
        var oldVal = ccInput.lastValue;
        if (typeof newVal != 'undefined') {
            var onlyNumber = newVal.replace(/\s+/g, '');
            if (onlyNumber.length >= 6) {
                $timeout.cancel(bankBinTime);
                bankBinTime = $timeout(function () {
                    $http({
                        method: "GET",
                        url: "/NewPayment/CheckBankBin?bin=" + onlyNumber.substr(0, 6),
                        headers: {
                            'Content-Type': 'application/json; charset=utf-8'
                        },
                    }).success(function (response, status) {
                        if (status && response.status) {
                            angular.element('.tab-nav-item').removeClass('active');
                            angular.element('.tabs .content').removeClass('active');
                            if (response.data != null && response.data.IsInstallmentUsage) {
                                var bonusArray = ['TEB', 'DENİZ BANK A.Ş.', 'ŞEKER BANK', 'ING BANK A.Ş.', 'TÜRKİYE FİNANS KATILIM BANKASI', 'BURGAN BANK A.Ş.', 'ALTERNATİF BANK A.Ş.', 'FIBABANKA'];
                                if (bonusArray.indexOf(response.data.BankName) > -1) {
                                    response.data.BankName = "GARANTI";
                                }
                                $scope.SelectedBank = response.data.BankName;
                                if ($scope.updatePassengerResponse.BankList.length > 0 || angular.element('#' + response.data.BankName).length < 1) {
                                    angular.element('.' + response.data.BankName).addClass('active');
                                    angular.element('#' + response.data.BankName).addClass('active');
                                    if ($scope.Variables.isMobile) {
                                        angular.element('#onePull00').click();
                                    } else {
                                        angular.element('#' + response.data.BankName + '.onepull').click();
                                    }
                                } else {
                                    $scope.Payment.Form.InstallmentOptionId = 0;
                                    angular.element('.tab-nav-item:first-child').addClass('active');
                                    angular.element('.tabs .content:first-child').addClass('active');
                                    angular.element('#onePull00').click();
                                }
                            } else {
                                $scope.SelectedBank = true;
                                $scope.Payment.Form.InstallmentOptionId = 0;
                                angular.element('.tab-nav-item').hide();
                                angular.element('.tabs .content').hide();
                                angular.element('.tab-nav-item:first-child').show().addClass('active');
                                angular.element('.tabs .content:first-child').show().addClass('active');
                                setTimeout(function () {
                                    angular.element('#onePull00').click();
                                });
                            }
                        }
                    });
                }, 350);
            } else if (onlyNumber.length < 6) {
                $scope.SelectedBank = true;
                $scope.Payment.Form.InstallmentOptionId = 0;
                angular.element('.tab-nav-item').removeClass('active');
                angular.element('.tabs .content').removeClass('active');
                angular.element('.tab-nav-item:first-child').addClass('active');
                angular.element('.tabs .content:first-child').addClass('active');
                angular.element('#onePull00').click();
            }
        }
        if (JSON.stringify(newVal) != JSON.stringify(oldVal) && typeof newVal != 'undefined' && newVal != '') {
            //$scope.Payment.Form.CardNumber = $scope.creditCardMask(newVal);
            if (ccInput.value == ccInput.lastValue) return;
            var caretPosition = ccInput.selectionStart;
            var sanitizedValue = ccInput.value.replace(/[^0-9]/gi, '');
            var parts = [];

            for (var i = 0, len = sanitizedValue.length; i < len; i += 4) {
                parts.push(sanitizedValue.substring(i, i + 4));
            }

            for (var i = caretPosition - 1; i >= 0; i--) {
                var c = ccInput.value[i];
                if (c < '0' || c > '9') {
                    caretPosition--;
                }
            }
            caretPosition += Math.floor(caretPosition / 4);

            ccInput.value = ccInput.lastValue = parts.join(' ');
            ccInput.selectionStart = ccInput.selectionEnd = caretPosition;

            $scope.PaymentForm.CardNumber.$error.creditcard = $scope.validCreditCard(onlyNumber) && onlyNumber.length == 16 ? false : true;
        }
        $scope.safeApply();
    });

    //Criteo
    //window.criteo_q = window.criteo_q || [];
    //window.criteo_q.push(
    //    { event: "setAccount", account: 33211 },
    //    { event: "setSiteType", type: $scope.Criteo.Type },
    //    { event: "viewSearch", checkin_date: $scope.Criteo.CheckinDate, checkout_date: $scope.Criteo.CheckoutDate },
    //    { event: "setEmail", email: MD5($scope.Passengers[0].Email) },
    //    {
    //        event: "viewBasket", item: [
    //          { id: $scope.Criteo.Product, price: $scope.allocateResponse.TicketTotalWithServiceFee, quantity: 1 }
    //        ]
    //    }
    //);
    if (domain.siteKey == 1) fbq('track', 'InitiateCheckout');

    var company1 = [];
    angular.forEach($scope.TicketDetail[0].SegmentList, function (e, i) {
        company1.push(e.MarketingAirline);
    });

    if (domain.siteKey == 1) {
        RSdataLayer.push({ 'company1': company1.join(',') });
        if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
            var company2 = [];
            angular.forEach($scope.TicketDetail[1].SegmentList, function (e, i) {
                company2.push(e.MarketingAirline);
            });
            RSdataLayer.push({ 'company2': company2 });
        }
        RSdataLayer.push({ 'age': (new Date().getFullYear() - $scope.Passengers[0].birthYear) });
        RSdataLayer.push({ 'gender': $scope.Passengers[0].Gender });
    }

    $timeout(function () {
        if ($('.tab-nav').length) {
            $('.tab-nav .tab-nav-item').click(function () {
                $('.tab-nav-item').removeClass('active');
                var that = this;
                $('.tabs > div').removeClass('active');
                $($(that).attr('data-target')).addClass('active');
                $(this).addClass('active');
            });
        }
        $('.tab-nav .tab-nav-item:nth-child(1)').addClass('active');
        $('.tabs > div:nth-child(1)').addClass('active');
        angular.element('#onePull00').click();
        $scope.loaded = true; console.log('loaded : true');
        //ilkay
        angular.element('#html').scope().loaded = true;
        $.Popup.close();
        $scope.safeApply();
    }, 300);
});

//Thanks Controller
searchApp.controller('ThanksController', function ($scope, $http, $timeout, $location, $filter) {
    $scope.allocateResponse = HepStorage.get('allocateResponse');
    $scope.TicketDetail = HepStorage.get('ticketDetail');
    if (((typeof $scope.finalizeShoppingResponse == 'undefined' || $.isEmptyObject($scope.finalizeShoppingResponse)) && !$scope.updatePassengerResponse.IsReservation) || $scope.allocateResponse == null) {
        window.location.href = "/";
    }
    if (($scope.finalizeShoppingResponse.length < 1 || $scope.finalizeShoppingResponse.Status == false) && !$scope.updatePassengerResponse.IsReservation) {
        location.hash = '#/';
    } else {
        if ($.isEmptyObject($scope.TicketDetail) || $scope.TicketDetail.realLength() < 1) {
            $scope.TicketDetail = HepStorage.get('ticketDetail');
        }
        $scope.Tickets = $scope.finalizeShoppingResponse.Data;
        $scope.allocateResponse.TicketTotalWithServiceFee = 0;
        angular.forEach($scope.allocateResponse.PriceDetails, function (price, i) {
            $scope.allocateResponse.TicketTotalWithServiceFee += (price.BaseFee + price.TaxFee + price.ServiceFee);
        });
        if (typeof $scope.Ticket != 'undefined' && $scope.Ticket.InsuranceStatus) {
            $scope.allocateResponse.TicketTotalWithServiceFee = $scope.allocateResponse.TicketTotalWithServiceFee + $scope.allocateResponse.Insurance.Price;
        }
    }

    angular.forEach($scope.TicketDetail, function (e, i) {
        angular.forEach(e.SegmentList, function (s, ii) {
            if (typeof e.SegmentList[ii + 1] != 'undefined') {
                if (s.ArrivalAirport != e.SegmentList[ii + 1].DepartureAirport) {
                    $scope.TicketDetail[i].transferNotes = true;
                }
            }
        });
    });
    $scope.loaded = false; console.log('false');
    $scope.stepLineToggle(true);
    $('.step-line .line').animate({
        width: '100%'
    }, 1500, function () {
        $('.step-line .circle:nth-child(2)').addClass('active');
        $('.step-line .circle:nth-child(3)').addClass('active');
        $('.step-line .circle:nth-child(4)').addClass('active');
    });

    $scope.$on('$routeChangeStart', function (scope, next, current) {
        if ((next.$$route.route == "PaymentController" || next.$$route.route == "TicketsController" || next.$$route.route == "SearchListController") && !$scope.Tickets.IsReservation) {
            window.location.href = '/';
            scope.preventDefault();
        } else if ($scope.Tickets.IsReservation && next.$$route.route == "PaymentController") {
            return true;
        } else{
            $location.path('/');
            var request = {};
            request['request'] = HepStorage.get('searchData');
            $scope.searchFunction(request);
        }
        return false;
    });

    if (location.host == domain.host && ($scope.Tickets.PaymentStatus == 0 || ($scope.Tickets.PaymentStatus == 1 && (typeof $scope.Tickets.IsReservation == 'undefined' || !$scope.Tickets.IsReservation)))) {
        //E-Commerce
        var airPortNames = $scope.TicketDetail[0].SegmentList[0].DepartureAirport + '|' + $scope.TicketDetail[0].SegmentList[$scope.TicketDetail[0].StopCount].ArrivalAirport;
        if ($scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return) {
            airPortNames += '|' + $scope.TicketDetail[1].SegmentList[$scope.TicketDetail[1].StopCount].ArrivalAirport;
        }
        var analyticsData = {
            'id': $scope.Data.SessionId,
            'name': airPortNames,
            'category': $scope.DefaultSearchData.flightType == $scope.Variables.FlightType.Return ? 'yurtdisi' : 'yurtici',
            'brand': domain.title,
            'variant': '',
            'price': (($scope.allocateResponse.ServiceFee * $scope.TotalPassengerWithOutInf) + $scope.allocateResponse.ExtraServiceFee) - $scope.allocateResponse.DiscountAmount,
            'quantity': $scope.TotalPassengerWithOutInf
        };

        ga('require', 'ec');
        ga('ec:addProduct', analyticsData);
        // Transaction level information is provided via an actionFieldObject.
        ga('ec:setAction', 'purchase', {
            'id': $scope.Data.SessionId,
            'affiliation': '',
            'revenue': (($scope.allocateResponse.ServiceFee * $scope.TotalPassengerWithOutInf) + $scope.allocateResponse.ExtraServiceFee) - $scope.allocateResponse.DiscountAmount,
            'tax': '',
            'shipping': '',
            'coupon': ''
        });
        ga('send', 'pageview');

        //Reklam Store
        var rsData = {
            adv_sub: ($scope.Tickets.PnrList == null ? '' : $scope.Tickets.PnrList[0]),
            adv_sub2: $scope.Criteo.Product,
            amount: ($scope.allocateResponse.ServiceFee + $scope.allocateResponse.ExtraServiceFee) - $scope.allocateResponse.DiscountAmount
        }
        if ($scope.isDomestic) {
            var rsUrl = 'https://ad.reklm.com/SL6EZ?';
            var goUrl = 'https://tr.rdrtr.com/GL7qc?';
        } else {
            var rsUrl = 'https://ad.reklm.com/GL6F5?';
            var goUrl = 'https://tr.rdrtr.com/GL7qW?';
        }
        $('body').append('<iframe src="' + rsUrl + $.param(rsData) + '" scrolling="no" frameborder="0" width="1" height="1"></iframe>');
        $('body').append('<iframe src="' + goUrl + $.param(rsData) + '" scrolling="no" frameborder="0" width="1" height="1"></iframe>');
        //Gelir Ortakları

        //Criteo
        //window.criteo_q = window.criteo_q || [];
        //window.criteo_q.push(
        //{ event: "setAccount", account: 33211 },
        //{ event: "setSiteType", type: $scope.Criteo.Type },
        //{ event: "viewSearch", checkin_date: $scope.Criteo.CheckinDate, checkout_date: $scope.Criteo.CheckoutDate },
        //{ event: "setEmail", email: MD5($scope.Passengers[0].Email) },
        //{
        //    event: "trackTransaction", id: $scope.Data.SessionId,
        //    item: [{ id: $scope.Criteo.Product, price: $scope.allocateResponse.ServiceFee + $scope.allocateResponse.ExtraServiceFee, quantity: 1 }]
        //});
        //Facebook
        if (domain.siteKey == 1) fbq('track', 'Purchase', { value: ($scope.allocateResponse.ServiceFee + $scope.allocateResponse.ExtraServiceFee) - $scope.allocateResponse.DiscountAmount, currency: 'TRY' });

        var bankName = 'Tek Çekim';
        var totalPrice = $scope.updatePassengerResponse.BankList[0].InstallmentOptionList[0].OriginalTotal;
        if ($scope.updatePassengerResponse.BankList != null && typeof $scope.updatePassengerResponse.BankList != 'undefined') {
            _.find($scope.updatePassengerResponse.BankList, function (item) {
                if (item.InstallmentOptionList != null && typeof item.InstallmentOptionList != 'undefined') {
                    _.find(item.InstallmentOptionList, function (item2) {
                        if (item2.OptionId == $scope.Payment.Form.InstallmentOptionId) {
                            bankName = item.Name;
                            totalPrice = item2.SubTotal;
                        }
                    });
                }
            });
        }
        if (domain.siteKey == 1) {
            RSdataLayer.push({ 'cardType': $scope.Payment.Form.CardType });
            RSdataLayer.push({ 'bank': bankName });
            RSdataLayer.push({ 'price': totalPrice });
        }
    }
    if (!$scope.updatePassengerResponse.IsReservation) {
        HepStorage.remove(['allocateResponse', 'allocateTime', 'passengers', 'searchResponse', 'searchTime', 'ticketDetail', 'session', 'updatePassenger', 'updatePassengerTime']);
    }

    $scope.updatePassengerResponse = {};
    $scope.loaded = true; console.log('true');
    $scope.safeApply();
    //if (typeof $scope.finalizeShoppingResponse.Data != 'undefined' && $scope.finalizeShoppingResponse.Message != null && $scope.finalizeShoppingResponse.Message != '') {
    //    $.Popup.open({ type: 'alert', title: 'Uyarı', message: $scope.finalizeShoppingResponse.Message });
    //}
});